Application Source Code - 21 files
====================================================================================================

File: src/lib/utils.ts
--------------------------------------------------------------------------------
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


====================================================================================================

File: src/app/page.tsx
--------------------------------------------------------------------------------
'use client'

import Link from 'next/link'

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <h1 className="text-4xl font-bold mb-8">Graph Visualizations</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Link href="/cytoscape-graph-viz1" 
              className="p-6 border rounded-lg hover:bg-gray-100 transition-colors">
          <h2 className="text-2xl font-semibold">Cytoscape Graph Viz 1</h2>
          <p className="mt-2">Basic graph visualization example</p>
        </Link>
        <Link href="/cytoscape-graph-viz2" 
              className="p-6 border rounded-lg hover:bg-gray-100 transition-colors">
          <h2 className="text-2xl font-semibold">Cytoscape Graph Viz 2</h2>
          <p className="mt-2">Intermediate graph visualization example</p>
        </Link>
        <Link href="/cytoscape-graph-viz3" 
              className="p-6 border rounded-lg hover:bg-gray-100 transition-colors">
          <h2 className="text-2xl font-semibold">Cytoscape Graph Viz 3</h2>
          <p className="mt-2">Advanced graph visualization example</p>
        </Link>
        <Link href="/life-sciences-graph-viz1" 
              className="p-6 border rounded-lg hover:bg-gray-100 transition-colors">
          <h2 className="text-2xl font-semibold">Life Sciences Graph Viz</h2>
          <p className="mt-2">Domain-specific visualization</p>
        </Link>
        <Link href="/temporal-graph-explorer" 
              className="p-6 border rounded-lg hover:bg-gray-100 transition-colors">
          <h2 className="text-2xl font-semibold">Temporal Graph Explorer</h2>
          <p className="mt-2">Time-based graph visualization</p>
        </Link>
      </div>
    </main>
  )
}


====================================================================================================

File: src/app/not-found.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import NotFoundPage from '../components/pages/NotFoundPage'

export default function NotFound() {
  return <NotFoundPage />
}


====================================================================================================

File: src/app/layout.tsx
--------------------------------------------------------------------------------
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Graph Visualizations',
  description: 'Interactive network and graph visualization demonstrations',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}


====================================================================================================

File: src/app/(routes)/life-sciences-graph-viz1/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import LifeSciencesGraphViz1 from '../../../components/pages/LifeSciencesGraphViz1'

export default function Page() {
  return <LifeSciencesGraphViz1 />
}


====================================================================================================

File: src/app/(routes)/cytoscape-graph-viz1/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import CytoscapeGraphViz1 from '../../../components/pages/CytoscapeGraphViz1'

export default function Page() {
  return <CytoscapeGraphViz1 />
}


====================================================================================================

File: src/app/(routes)/temporal-graph-explorer/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import TemporalGraphExplorer from '../../../components/pages/TemporalGraphExplorer'

export default function Page() {
  return <TemporalGraphExplorer />
}


====================================================================================================

File: src/app/(routes)/placeholder-page/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import PlaceholderPage from '../../../components/pages/PlaceholderPage'

export default function Page() {
  return <PlaceholderPage />
}


====================================================================================================

File: src/app/(routes)/cytoscape-graph-viz3/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import CytoscapeGraphViz3 from '../../../components/pages/CytoscapeGraphViz3'

export default function Page() {
  return <CytoscapeGraphViz3 />
}


====================================================================================================

File: src/app/(routes)/cytoscape-graph-viz2/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import CytoscapeGraphViz2 from '../../../components/pages/CytoscapeGraphViz2'

export default function Page() {
  return <CytoscapeGraphViz2 />
}


====================================================================================================

File: src/app/(routes)/cytoscape-graph-explorer/page.tsx
--------------------------------------------------------------------------------
'use client'

import React from 'react'
import CytoscapeGraphExplorer from '../../../components/pages/CytoscapeGraphExplorer'

export default function Page() {
  return <CytoscapeGraphExplorer />
}


====================================================================================================

File: src/hooks/useTimelineAnimation.ts
--------------------------------------------------------------------------------
import { useState, useEffect } from 'react';

export interface TimelineItem {
  timestamp: number;
  [key: string]: any;
}

interface UseTimelineAnimationProps {
  timelineData: TimelineItem[];
  initialTime?: number;
  initialPlaybackSpeed?: number;
}

export default function useTimelineAnimation({
  timelineData,
  initialTime = 0,
  initialPlaybackSpeed = 1
}: UseTimelineAnimationProps) {
  const [currentTime, setCurrentTime] = useState(initialTime);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(initialPlaybackSpeed);

  // Play/pause timeline animation
  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;
    if (isPlaying && timelineData.length > 0) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  return {
    currentTime,
    setCurrentTime,
    isPlaying,
    setIsPlaying,
    playbackSpeed,
    setPlaybackSpeed
  };
}


====================================================================================================

File: src/utils/colors.ts
--------------------------------------------------------------------------------
import resolveConfig from 'tailwindcss/resolveConfig';
import tailwindConfig from '../../tailwind.config.js';

const fullConfig = resolveConfig(tailwindConfig);
const colors = fullConfig.theme.colors;

// Base colors from Tailwind with consistent primary/light/dark variants
export const baseColors = {
  green: {
    light: colors.green['300'],      // #9ae6b4
    primary: colors.green['500'],    // #48bb78
    dark: colors.green['700'],       // #2f855a
  },
  purple: {
    light: colors.purple['300'],     // #d6bcfa
    primary: colors.purple['500'],   // #9f7aea
    dark: colors.purple['700'],      // #6b46c1
  },
  orange: {
    light: colors.orange['300'],     // #f6ad55
    primary: colors.orange['500'],   // #ed8936
    dark: colors.orange['700'],      // #c05621
  },
  blue: {
    light: colors.blue['300'],       // #90cdf4
    primary: colors.blue['500'],     // #4299e1
    dark: colors.blue['700'],        // #2b6cb0
  },
  gray: {
    light: colors.gray['200'],       // #edf2f7
    primary: colors.gray['500'],     // #a0aec0
    dark: colors.gray['700'],        // #4a5568
  },
  red: {
    light: colors.red['300'],        // #feb2b2
    primary: colors.red['500'],      // #f56565
    dark: colors.red['700'],         // #c53030
  },
  yellow: {
    light: colors.yellow['200'],     // #fefcbf
    primary: colors.yellow['400'],   // #f6e05e
    dark: colors.yellow['600'],      // #d69e2e
  }
};

// Semantic mapping for node types
export const nodeTypeColors = {
  'schema:ClinicalTrial': {
    'background-color': baseColors.green.primary,
    'border-color': baseColors.green.dark
  },
  'schema:Drug': {
    'background-color': baseColors.purple.primary,
    'border-color': baseColors.purple.dark
  },
  'schema:MedicalOrganization': {
    'background-color': baseColors.orange.primary,
    'border-color': baseColors.orange.dark
  },
  'schema:MedicalCondition': {
    'background-color': baseColors.orange.light,
    'border-color': baseColors.orange.primary
  },
  'schema:RegulatoryApproval': {
    'background-color': baseColors.blue.primary,
    'border-color': baseColors.blue.dark
  },
  'schema:GovernmentOrganization': {
    'background-color': baseColors.gray.primary,
    'border-color': baseColors.gray.dark
  }
};

// Semantic mapping for relationship types
export const edgeTypeColors = {
  'schema:fundedBy': {
    'line-color': baseColors.gray.primary,
    'target-arrow-color': baseColors.gray.primary
  },
  'schema:testedDrug': {
    'line-color': baseColors.red.primary,
    'target-arrow-color': baseColors.red.primary
  },
  'schema:approvedBy': {
    'line-color': baseColors.yellow.primary,
    'target-arrow-color': baseColors.yellow.primary
  },
  'schema:relatedTo': {
    'line-color': baseColors.purple.light,
    'target-arrow-color': baseColors.purple.light
  }
};

====================================================================================================

File: src/components/pages/CytoscapeGraphViz3.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect, useRef } from 'react';

import cytoscape from 'cytoscape';

// Graph Visualization Component using Cytoscape.js
const GraphVisualization = ({ graphData, onNodeSelect }) => {
  const cyRef = useRef(null);
  const containerRef = useRef(null);

  // Initialize Cytoscape instance
  useEffect(() => {
    if (!graphData || !containerRef.current) return;

    // Convert graph data to Cytoscape format using the updated layout field
    const elements = {
      nodes: graphData.nodes.map(node => ({
        data: { 
          id: node.id,
          label: node.label, 
          ...node.properties
        },
        position: node.layout ? { x: node.layout.x, y: node.layout.y } : { x: 0, y: 0 }
      })),
      edges: graphData.edges.map(edge => ({
        data: { 
          id: edge.id, 
          source: edge.source, 
          target: edge.target, 
          label: edge.type,
          ...edge.properties
        }
      }))
    };

    // Define node styles based on label
    const nodeStyles = {
      'Person': {
        'background-color': '#4299e1',
        'border-color': '#2b6cb0'
      },
      'Company': {
        'background-color': '#ed8936',
        'border-color': '#c05621'
      },
      'Project': {
        'background-color': '#48bb78',
        'border-color': '#2f855a'
      },
      'Technology': {
        'background-color': '#9f7aea',
        'border-color': '#6b46c1'
      }
    };

    // Define edge styles based on type
    const edgeStyles = {
      'WORKS_AT': {
        'line-color': '#a0aec0',
        'target-arrow-color': '#a0aec0'
      },
      'MANAGES': {
        'line-color': '#fc8181',
        'target-arrow-color': '#fc8181'
      },
      'WORKS_ON': {
        'line-color': '#fbd38d',
        'target-arrow-color': '#fbd38d'
      },
      'USES': {
        'line-color': '#d6bcfa',
        'target-arrow-color': '#d6bcfa'
      }
    };

    // Create new Cytoscape instance
    cyRef.current = cytoscape({
      container: containerRef.current,
      elements: elements,
      style: [
        {
          selector: 'node',
          style: {
            'width': 40,
            'height': 40,
            'background-color': '#4299e1',
            'border-width': 2,
            'border-color': '#2b6cb0',
            'label': 'data(name)', // Show name if available, fallback to id
            'color': 'white',
            'text-halign': 'center',
            'text-valign': 'center',
            'font-size': '12px',
            'font-weight': 'bold',
            'text-wrap': 'wrap',
            'text-max-width': '100px'
          }
        },
        {
          selector: 'node[?id]',
          style: {
            'label': 'data(id)' // Fallback if name is not available
          }
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#a0aec0',
            'target-arrow-color': '#a0aec0',
            'target-arrow-shape': 'triangle',
            'curve-style': 'bezier',
            'label': 'data(label)',
            'font-size': '10px',
            'text-rotation': 'autorotate',
            'text-margin-y': -10
          }
        },
        // Apply node styles based on label
        ...Object.entries(nodeStyles).map(([label, style]) => ({
          selector: `node[label = "${label}"]`,
          style: style
        })),
        // Apply edge styles based on type
        ...Object.entries(edgeStyles).map(([type, style]) => ({
          selector: `edge[label = "${type}"]`,
          style: style
        })),
        // Selected node style
        {
          selector: 'node:selected',
          style: {
            'border-width': 4,
            'border-color': '#fff',
            'box-shadow': '0 0 0 2px #000'
          }
        }
      ],
      layout: {
        name: 'preset'
      },
      userZoomingEnabled: true,
      userPanningEnabled: true,
      boxSelectionEnabled: false
    });

    // Add event listeners
    cyRef.current.on('tap', 'node', event => {
      const node = event.target;
      const nodeData = graphData.nodes.find(n => n.id === node.id());
      if (nodeData && onNodeSelect) {
        onNodeSelect(nodeData);
      }
    });

    cyRef.current.on('tap', function(event) {
      if (event.target === cyRef.current) {
        // Clicked on background
        if (onNodeSelect) {
          onNodeSelect(null);
        }
      }
    });

    // Clean up
    return () => {
      if (cyRef.current) {
        cyRef.current.destroy();
      }
    };
  }, [graphData, onNodeSelect]);

  return (
    <div ref={containerRef} style={{ width: '100%', height: '100%' }} />
  );
};

// JSON Schema for Temporal Graph Data
const graphSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Temporal Graph Schema",
  "type": "object",
  "required": ["graph"],
  "properties": {
    "graph": {
      "type": "object",
      "required": ["nodes", "edges", "metadata"],
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["id", "label", "properties"],
            "properties": {
              "id": { "type": "string" },
              "label": { "type": "string" },
              "properties": { "type": "object" },
              "layout": {
                "type": "object",
                "properties": {
                  "x": { "type": "number" },
                  "y": { "type": "number" }
                }
              },
              "temporal": {
                "type": "object",
                "properties": {
                  "validFrom": { "type": "string", "format": "date-time" },
                  "validTo": { "type": "string", "format": "date-time" }
                }
              }
            }
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["id", "source", "target", "type", "properties"],
            "properties": {
              "id": { "type": "string" },
              "source": { "type": "string" },
              "target": { "type": "string" },
              "type": { "type": "string" },
              "properties": { "type": "object" },
              "temporal": {
                "type": "object",
                "properties": {
                  "validFrom": { "type": "string", "format": "date-time" },
                  "validTo": { "type": "string", "format": "date-time" }
                }
              }
            }
          }
        },
        "metadata": {
          "type": "object",
          "properties": {
            "schemaVersion": { "type": "string" },
            "graphType": { "type": "string", "enum": ["directed", "undirected"] },
            "description": { "type": "string" },
            "author": { "type": "string" },
            "lastUpdated": { "type": "string", "format": "date-time" },
            "indexedProperties": { "type": "array", "items": { "type": "string" } },
            "keyEvents": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": { "type": "string", "format": "date-time" },
                  "description": { "type": "string" }
                }
              }
            }
          }
        }
      }
    }
  }
};

// Main App Component
const CytoscapeGraphViz3 = () => {
  // Default sample data conforming to the schema
  const defaultGraphData = {
    graph: {
      nodes: [
        { id: "1", label: "Person", properties: { name: "John Smith", age: 34 }, layout: { x: 100, y: 100 } },
        { id: "2", label: "Person", properties: { name: "Emma Johnson", age: 29 }, layout: { x: 250, y: 150 } },
        { id: "3", label: "Company", properties: { name: "Acme Corp", foundedDate: "2005-01-01" }, layout: { x: 175, y: 250 } },
        { id: "4", label: "Project", properties: { name: "Website Redesign", budget: 50000 }, layout: { x: 300, y: 120 }, 
          temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "5", label: "Technology", properties: { name: "React", version: "18.2" }, layout: { x: 400, y: 170 }, 
          temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "6", label: "Project", properties: { name: "Mobile App", budget: 75000 }, layout: { x: 350, y: 250 }, 
          temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "7", label: "Person", properties: { name: "Alex Chen", age: 31 }, layout: { x: 150, y: 350 }, 
          temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "8", label: "Technology", properties: { name: "Node.js", version: "18.0" }, layout: { x: 450, y: 300 }, 
          temporal: { validFrom: "2023-09-01T00:00:00Z" } },
      ],
      edges: [
        { id: "e1", source: "1", target: "3", type: "WORKS_AT", properties: { startDate: "2018-01-01" } },
        { id: "e2", source: "2", target: "3", type: "WORKS_AT", properties: { startDate: "2020-01-01" } },
        { id: "e3", source: "3", target: "4", type: "MANAGES", properties: { startDate: "2023-02-15" }, 
          temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "e4", source: "1", target: "4", type: "WORKS_ON", properties: { role: "Project Manager" }, 
          temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e5", source: "2", target: "4", type: "WORKS_ON", properties: { role: "Developer" }, 
          temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e6", source: "4", target: "5", type: "USES", properties: { criticalityLevel: "High" }, 
          temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "e7", source: "3", target: "6", type: "MANAGES", properties: { startDate: "2023-05-10" }, 
          temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "e8", source: "2", target: "6", type: "WORKS_ON", properties: { role: "Team Lead" }, 
          temporal: { validFrom: "2023-06-01T00:00:00Z" } },
        { id: "e9", source: "7", target: "3", type: "WORKS_AT", properties: { startDate: "2023-07-01" }, 
          temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "e10", source: "7", target: "6", type: "WORKS_ON", properties: { role: "Developer" }, 
          temporal: { validFrom: "2023-08-01T00:00:00Z" } },
        { id: "e11", source: "6", target: "8", type: "USES", properties: { criticalityLevel: "Medium" }, 
          temporal: { validFrom: "2023-09-01T00:00:00Z" } },
        { id: "e12", source: "7", target: "4", type: "WORKS_ON", properties: { role: "Support" }, 
          temporal: { validFrom: "2023-10-01T00:00:00Z" } },
      ],
      metadata: {
        schemaVersion: "1.0",
        graphType: "directed",
        description: "A directed temporal graph modeling employee-project relationships at Acme Corp during 2023",
        author: "Temporal Graph Explorer Team",
        lastUpdated: "2023-11-01T00:00:00Z",
        indexedProperties: ["name", "startDate", "role"],
        keyEvents: [
          { timestamp: "2023-02-01T00:00:00Z", description: "Website Redesign project started" },
          { timestamp: "2023-04-01T00:00:00Z", description: "React technology adopted" },
          { timestamp: "2023-05-01T00:00:00Z", description: "Mobile App project launched" },
          { timestamp: "2023-07-01T00:00:00Z", description: "Alex Chen joined the company" },
          { timestamp: "2023-09-01T00:00:00Z", description: "Node.js implemented in Mobile App" }
        ]
      }
    }
  };

  // State management
  const [fullGraphData, setFullGraphData] = useState(defaultGraphData);
  const [displayedGraphData, setDisplayedGraphData] = useState({ nodes: [], edges: [] });
  const [currentTime, setCurrentTime] = useState(new Date("2023-11-01T00:00:00Z").getTime());
  const [loading, setLoading] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  const [timelineData, setTimelineData] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(1);
  const [importError, setImportError] = useState(null);
  const [metadataVisible, setMetadataVisible] = useState(false);
  const fileInputRef = useRef(null);

  // Convert key events to timeline points
  useEffect(() => {
    if (fullGraphData?.graph?.metadata?.keyEvents) {
      const events = fullGraphData.graph.metadata.keyEvents;
      
      // Generate monthly timeline data points
      const startTime = new Date("2023-01-01T00:00:00Z").getTime();
      const endTime = new Date("2023-12-01T00:00:00Z").getTime();
      const monthlyData = [];
      
      let currentTime = startTime;
      let month = 0;
      
      while (currentTime <= endTime) {
        const date = new Date(currentTime);
        const monthName = date.toLocaleString('default', { month: 'short', year: 'numeric' });
        
        // Calculate counts for this month (simplified simulation)
        const nodeCount = 45 + Math.floor(month * 4.5);
        const edgeCount = 67 + Math.floor(month * 10.5);
        const changes = month === 0 ? 0 : 5 + Math.floor(Math.random() * 20);
        
        monthlyData.push({
          timestamp: currentTime,
          date: monthName,
          nodeCount,
          edgeCount,
          changes
        });
        
        // Move to next month
        month++;
        date.setMonth(date.getMonth() + 1);
        currentTime = date.getTime();
      }
      
      setTimelineData(monthlyData);
    }
  }, [fullGraphData]);

  // Load graph data based on current time
  useEffect(() => {
    updateDisplayedGraph(currentTime);
  }, [currentTime, fullGraphData]);

  // Play/pause timeline animation
  useEffect(() => {
    let interval;
    if (isPlaying && timelineData.length > 0) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  // Update displayed graph based on time
  const updateDisplayedGraph = (timestamp) => {
    setLoading(true);
    
    setTimeout(() => {
      if (fullGraphData && fullGraphData.graph) {
        const { nodes, edges } = fullGraphData.graph;
        
        // Filter nodes based on temporal.validFrom (if present)
        const filteredNodes = nodes.filter(node => 
          !node.temporal || !node.temporal.validFrom || 
          new Date(node.temporal.validFrom).getTime() <= timestamp
        );
        
        // Filter edges based on temporal.validFrom (if present)
        const filteredEdges = edges.filter(edge => 
          !edge.temporal || !edge.temporal.validFrom || 
          new Date(edge.temporal.validFrom).getTime() <= timestamp
        );
        
        setDisplayedGraphData({
          nodes: filteredNodes,
          edges: filteredEdges
        });
      }
      
      setLoading(false);
    }, 300);
  };

  // Format timestamp to readable date
  const formatDate = (timestamp) => {
    return new Date(timestamp).toLocaleDateString();
  };

  // Get current timeline data point
  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || 
    timelineData.find(item => item.timestamp < currentTime) || {};

  // Get key events from metadata
  const keyEvents = fullGraphData?.graph?.metadata?.keyEvents?.map(event => ({
    timestamp: new Date(event.timestamp).getTime(),
    description: event.description
  })) || [];

  // Get current event if there is one
  const currentEvent = keyEvents.find(event => {
    // Check if current time is within the month of this event
    const eventDate = new Date(event.timestamp);
    const currentDate = new Date(currentTime);
    return eventDate.getMonth() === currentDate.getMonth() && 
           eventDate.getFullYear() === currentDate.getFullYear();
  });

  // Export schema definition
  const exportSchema = () => {
    const blob = new Blob([JSON.stringify(graphSchema, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'temporal-graph-schema.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Export current graph data
  const exportGraphData = () => {
    const blob = new Blob([JSON.stringify(fullGraphData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'temporal-graph-data.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Import graph data from file
  const importGraphData = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    setImportError(null);
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target.result);
        
        // Basic validation of the imported data
        if (importedData.graph && 
            Array.isArray(importedData.graph.nodes) && 
            Array.isArray(importedData.graph.edges) &&
            importedData.graph.metadata) {
          
          setFullGraphData(importedData);
          setCurrentTime(new Date("2023-01-01T00:00:00Z").getTime()); // Reset to beginning
          
        } else {
          setImportError("The imported file does not follow the required schema format.");
        }
      } catch (error) {
        console.error("Error parsing imported file:", error);
        setImportError("Failed to parse the imported file. Make sure it's a valid JSON file.");
      }
    };
    
    reader.readAsText(file);
    
    // Reset the file input
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Reset to default data
  const resetToDefault = () => {
    setFullGraphData(defaultGraphData);
    setCurrentTime(new Date("2023-01-01T00:00:00Z").getTime());
    setSelectedNode(null);
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Temporal Graph Explorer</h1>
          
          <div className="flex items-center space-x-4">
            <div className="px-4 py-2 bg-white bg-opacity-20 rounded">
              {formatDate(currentTime)}
            </div>
            
            <div className="flex">
              <button 
                onClick={() => setMetadataVisible(!metadataVisible)} 
                className="bg-white bg-opacity-20 px-3 py-2 rounded-l hover:bg-opacity-30 transition"
                title="View graph metadata"
              >
                Info
              </button>
              <button 
                onClick={exportSchema} 
                className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition"
                title="Export schema definition"
              >
                Schema
              </button>
              <button 
                onClick={exportGraphData} 
                className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition"
                title="Export current graph data"
              >
                Export
              </button>
              <button 
                onClick={() => fileInputRef.current.click()} 
                className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition"
                title="Import graph data"
              >
                Import
              </button>
              <button 
                onClick={resetToDefault} 
                className="bg-white bg-opacity-20 px-3 py-2 rounded-r hover:bg-opacity-30 transition"
                title="Reset to default data"
              >
                Reset
              </button>
              <input 
                type="file" 
                ref={fileInputRef}
                onChange={importGraphData} 
                accept=".json" 
                className="hidden" 
              />
            </div>
          </div>
        </div>
      </header>
      
      {/* Import Error Alert */}
      {importError && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <div className="flex items-center">
            <div className="py-1">
              <svg className="h-6 w-6 text-red-500 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div>
              <p className="font-bold">Import Error</p>
              <p className="text-sm">{importError}</p>
            </div>
            <button 
              onClick={() => setImportError(null)} 
              className="ml-auto text-red-500 hover:text-red-700"
            >
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      )}
      
      {/* Metadata Panel */}
      {metadataVisible && fullGraphData?.graph?.metadata && (
        <div className="bg-white border-b shadow-sm p-4">
          <div className="container mx-auto">
            <div className="flex justify-between items-center mb-2">
              <h2 className="text-lg font-semibold">Graph Metadata</h2>
              <button 
                onClick={() => setMetadataVisible(false)} 
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <span className="text-sm font-medium text-gray-500">Description</span>
                <p className="text-sm">{fullGraphData.graph.metadata.description}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Schema Version</span>
                <p className="text-sm">{fullGraphData.graph.metadata.schemaVersion}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Graph Type</span>
                <p className="text-sm">{fullGraphData.graph.metadata.graphType}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Last Updated</span>
                <p className="text-sm">{new Date(fullGraphData.graph.metadata.lastUpdated).toLocaleDateString()}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Author</span>
                <p className="text-sm">{fullGraphData.graph.metadata.author}</p>
              </div>
              <div className="md:col-span-2">
                <span className="text-sm font-medium text-gray-500">Indexed Properties</span>
                <p className="text-sm">{fullGraphData.graph.metadata.indexedProperties?.join(', ')}</p>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left sidebar */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {Array.from(new Set(fullGraphData.graph.nodes.map(node => node.label))).map(label => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {Array.from(new Set(fullGraphData.graph.edges.map(edge => edge.type))).map(type => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea 
              className="w-full p-2 border rounded h-24 text-sm"
              placeholder="Ask a question about the graph data..."
            ></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
              Ask AI
            </button>
          </div>
        </div>
        
        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline control */}
          <div className="bg-white border-b p-4 flex flex-col space-y-4">
            <div className="flex items-center space-x-4">
              <button 
                onClick={() => setIsPlaying(!isPlaying)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center justify-center w-24"
              >
                {isPlaying ? 'Pause' : 'Play'}
              </button>
              
              <div className="flex space-x-2">
                <button 
                  onClick={() => setPlaybackSpeed(0.5)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 0.5 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  0.5x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(1)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  1x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(2)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  2x
                </button>
              </div>
              
              <div className="text-sm font-medium">
                {formatDate(currentTime)}
              </div>
              
              {currentEvent && (
                <div className="flex-1 ml-4 text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-500">
                  <span className="font-medium">Event:</span> {currentEvent.description}
                </div>
              )}
            </div>
            
            <div className="flex-1">
              <input
                type="range"
                min={timelineData.length > 0 ? timelineData[0].timestamp : 0}
                max={timelineData.length > 0 ? timelineData[timelineData.length - 1].timestamp : 100}
                value={currentTime}
                onChange={(e) => setCurrentTime(parseInt(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                {timelineData.length > 0 && (
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                )}
              </div>
            </div>
          </div>
          
          {/* Graph visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                <div className="ml-4 text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                {/* Graph metadata */}
                <div className="absolute top-4 left-4 bg-white p-2 rounded shadow-sm z-10">
                  <div className="text-sm font-medium border-b pb-1 mb-1">Graph Statistics</div>
                  <div className="text-sm"><strong>Nodes:</strong> {displayedGraphData.nodes.length}</div>
                  <div className="text-sm"><strong>Edges:</strong> {displayedGraphData.edges.length}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>
                
                {/* Cytoscape visualization */}
                <GraphVisualization 
                  graphData={displayedGraphData} 
                  onNodeSelect={setSelectedNode}
                />
                
                {/* Legend */}
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">Person</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">Company</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">Project</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Technology</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Right Sidebar - Details Panel */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            // Node details panel
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button 
                  className="text-gray-400 hover:text-gray-600"
                  onClick={() => setSelectedNode(null)}
                >
                  ×
                </button>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium"
                  style={{ 
                    backgroundColor: 
                      selectedNode.label === 'Person' ? '#bee3f8' :
                      selectedNode.label === 'Company' ? '#feebc8' :
                      selectedNode.label === 'Project' ? '#c6f6d5' :
                      selectedNode.label === 'Technology' ? '#e9d8fd' : '#bee3f8',
                    color:
                      selectedNode.label === 'Person' ? '#2c5282' :
                      selectedNode.label === 'Company' ? '#7b341e' :
                      selectedNode.label === 'Project' ? '#276749' :
                      selectedNode.label === 'Technology' ? '#553c9a' : '#2c5282',
                  }}
                >
                  {selectedNode.label}
                </div>
              </div>
              
              {selectedNode.temporal && (
                <div className="mb-4">
                  <div className="text-sm text-gray-500">Temporal Data</div>
                  <div className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">Valid From:</div>
                    <div className="text-sm">{new Date(selectedNode.temporal.validFrom).toLocaleDateString()}</div>
                  </div>
                  {selectedNode.temporal.validTo && (
                    <div className="flex py-1 border-b border-gray-100">
                      <div className="font-medium text-sm w-1/3">Valid To:</div>
                      <div className="text-sm">{new Date(selectedNode.temporal.validTo).toLocaleDateString()}</div>
                    </div>
                  )}
                </div>
              )}
              
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">
                  Find Related Nodes
                </button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">
                  View History
                </button>
              </div>
            </div>
          ) : (
            // LLM query panel (simplified)
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the graph data!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze temporal patterns</li>
                  <li>Find relationships between nodes</li>
                  <li>Explain graph evolution</li>
                  <li>Discover paths between entities</li>
                </ul>
              </div>
              
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How has the graph evolved over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What connections exist between John and the Website Redesign project?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    When was the Mobile App project launched?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CytoscapeGraphViz3;

====================================================================================================

File: src/components/pages/CytoscapeGraphViz2.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect, useRef } from 'react';

import cytoscape from 'cytoscape';

const GraphVisualization = ({ graphData, onNodeSelect }) => {
  const cyRef = useRef(null);
  const containerRef = useRef(null);

  // Initialize Cytoscape instance
  useEffect(() => {
    if (!graphData || !containerRef.current) return;

    // Convert graph data to Cytoscape format using the updated layout field
    const elements = {
      nodes: graphData.nodes.map(node => ({
        data: { 
          id: node.id,
          label: node.label, 
          ...node.properties
        },
        position: node.layout ? { x: node.layout.x, y: node.layout.y } : { x: 0, y: 0 }
      })),
      edges: graphData.edges.map(edge => ({
        data: { 
          id: edge.id, 
          source: edge.source, 
          target: edge.target, 
          label: edge.type,
          ...edge.properties
        }
      }))
    };

    // Define node styles based on label
    const nodeStyles = {
      'Person': { 'background-color': '#4299e1', 'border-color': '#2b6cb0' },
      'Company': { 'background-color': '#ed8936', 'border-color': '#c05621' },
      'Project': { 'background-color': '#48bb78', 'border-color': '#2f855a' },
      'Technology': { 'background-color': '#9f7aea', 'border-color': '#6b46c1' }
    };

    // Define edge styles based on type
    const edgeStyles = {
      'WORKS_AT': { 'line-color': '#a0aec0', 'target-arrow-color': '#a0aec0' },
      'MANAGES': { 'line-color': '#fc8181', 'target-arrow-color': '#fc8181' },
      'WORKS_ON': { 'line-color': '#fbd38d', 'target-arrow-color': '#fbd38d' },
      'USES': { 'line-color': '#d6bcfa', 'target-arrow-color': '#d6bcfa' }
    };

    // Create Cytoscape instance
    cyRef.current = cytoscape({
      container: containerRef.current,
      elements: elements,
      style: [
        {
          selector: 'node',
          style: {
            'width': 40,
            'height': 40,
            'background-color': '#4299e1',
            'border-width': 2,
            'border-color': '#2b6cb0',
            'label': 'data(id)',
            'color': 'white',
            'text-halign': 'center',
            'text-valign': 'center',
            'font-size': '12px',
            'font-weight': 'bold'
          }
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#a0aec0',
            'target-arrow-color': '#a0aec0',
            'target-arrow-shape': 'triangle',
            'curve-style': 'bezier',
            'label': 'data(label)',
            'font-size': '10px',
            'text-rotation': 'autorotate',
            'text-margin-y': -10
          }
        },
        ...Object.entries(nodeStyles).map(([label, style]) => ({
          selector: `node[label = "${label}"]`,
          style: style
        })),
        ...Object.entries(edgeStyles).map(([type, style]) => ({
          selector: `edge[label = "${type}"]`,
          style: style
        })),
        {
          selector: 'node:selected',
          style: {
            'border-width': 4,
            'border-color': '#fff',
            'box-shadow': '0 0 0 2px #000'
          }
        }
      ],
      layout: { name: 'preset' },
      userZoomingEnabled: true,
      userPanningEnabled: true,
      boxSelectionEnabled: false
    });

    // Event listeners
    cyRef.current.on('tap', 'node', event => {
      const node = event.target;
      const nodeData = graphData.nodes.find(n => n.id === node.id());
      if (nodeData && onNodeSelect) onNodeSelect(nodeData);
    });

    cyRef.current.on('tap', event => {
      if (event.target === cyRef.current && onNodeSelect) {
        onNodeSelect(null);
      }
    });

    return () => {
      if (cyRef.current) cyRef.current.destroy();
    };
  }, [graphData, onNodeSelect]);

  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;
};

const CytoscapeGraphViz2 = () => {
  // States for timeline, graph, and import/export management
  const [currentTime, setCurrentTime] = useState(1698796800000); // Nov 1, 2023
  const [graphData, setGraphData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  const [timelineData, setTimelineData] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(1);
  const fileInputRef = useRef(null);

  // Load mock timeline data and initial graph schema
  useEffect(() => {
    const mockTimelineData = [
      { timestamp: 1672531200000, nodeCount: 45, edgeCount: 67, changes: 0, date: "Jan 2023" },
      { timestamp: 1675209600000, nodeCount: 52, edgeCount: 78, changes: 18, date: "Feb 2023" },
      { timestamp: 1677628800000, nodeCount: 58, edgeCount: 92, changes: 20, date: "Mar 2023" },
      { timestamp: 1680307200000, nodeCount: 62, edgeCount: 103, changes: 15, date: "Apr 2023" },
      { timestamp: 1682899200000, nodeCount: 71, edgeCount: 126, changes: 32, date: "May 2023" },
      { timestamp: 1685577600000, nodeCount: 73, edgeCount: 131, changes: 7, date: "Jun 2023" },
      { timestamp: 1688169600000, nodeCount: 79, edgeCount: 142, changes: 17, date: "Jul 2023" },
      { timestamp: 1690848000000, nodeCount: 84, edgeCount: 155, changes: 18, date: "Aug 2023" },
      { timestamp: 1693526400000, nodeCount: 86, edgeCount: 161, changes: 8, date: "Sep 2023" },
      { timestamp: 1696118400000, nodeCount: 90, edgeCount: 170, changes: 13, date: "Oct 2023" },
      { timestamp: 1698796800000, nodeCount: 94, edgeCount: 182, changes: 16, date: "Nov 2023" },
      { timestamp: 1701388800000, nodeCount: 98, edgeCount: 193, changes: 15, date: "Dec 2023" },
    ];
    setTimelineData(mockTimelineData);
    loadGraphData(currentTime);
  }, []);

  // Timeline animation control
  useEffect(() => {
    let interval;
    if (isPlaying && timelineData.length > 0) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  // Update graph data when time changes (only if timeline is active)
  useEffect(() => {
    if (currentTime && timelineData.length > 0) {
      loadGraphData(currentTime);
    }
  }, [currentTime]);

  // Load graph data for a specific timestamp using updated sample JSON structure
  const loadGraphData = (timestamp) => {
    setLoading(true);
    setTimeout(() => {
      // Base nodes (always present)
      const baseNodes = [
        { id: "1", label: "Person", properties: { name: "John Smith", age: 34 }, layout: { x: 100, y: 100 } },
        { id: "2", label: "Person", properties: { name: "Emma Johnson", age: 29 }, layout: { x: 250, y: 150 } },
        { id: "3", label: "Company", properties: { name: "Acme Corp", foundedDate: "2005-01-01" }, layout: { x: 175, y: 250 } },
      ];

      // Time-based nodes with temporal.validFrom
      const timeBasedNodes = [
        { id: "4", label: "Project", properties: { name: "Website Redesign", budget: 50000 }, layout: { x: 300, y: 120 }, temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "5", label: "Technology", properties: { name: "React", version: "18.2" }, layout: { x: 400, y: 170 }, temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "6", label: "Project", properties: { name: "Mobile App", budget: 75000 }, layout: { x: 350, y: 250 }, temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "7", label: "Person", properties: { name: "Alex Chen", age: 31 }, layout: { x: 150, y: 350 }, temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "8", label: "Technology", properties: { name: "Node.js", version: "18.0" }, layout: { x: 450, y: 300 }, temporal: { validFrom: "2023-09-01T00:00:00Z" } },
      ];

      // Base edges (always present)
      const baseEdges = [
        { id: "e1", source: "1", target: "3", type: "WORKS_AT", properties: { startDate: "2018-01-01" } },
        { id: "e2", source: "2", target: "3", type: "WORKS_AT", properties: { startDate: "2020-01-01" } },
      ];

      // Time-based edges with temporal.validFrom
      const timeBasedEdges = [
        { id: "e3", source: "3", target: "4", type: "MANAGES", properties: { startDate: "2023-02-15" }, temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "e4", source: "1", target: "4", type: "WORKS_ON", properties: { role: "Project Manager" }, temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e5", source: "2", target: "4", type: "WORKS_ON", properties: { role: "Developer" }, temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e6", source: "4", target: "5", type: "USES", properties: { criticalityLevel: "High" }, temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "e7", source: "3", target: "6", type: "MANAGES", properties: { startDate: "2023-05-10" }, temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "e8", source: "2", target: "6", type: "WORKS_ON", properties: { role: "Team Lead" }, temporal: { validFrom: "2023-06-01T00:00:00Z" } },
        { id: "e9", source: "7", target: "3", type: "WORKS_AT", properties: { startDate: "2023-07-01" }, temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "e10", source: "7", target: "6", type: "WORKS_ON", properties: { role: "Developer" }, temporal: { validFrom: "2023-08-01T00:00:00Z" } },
        { id: "e11", source: "6", target: "8", type: "USES", properties: { criticalityLevel: "Medium" }, temporal: { validFrom: "2023-09-01T00:00:00Z" } },
        { id: "e12", source: "7", target: "4", type: "WORKS_ON", properties: { role: "Support" }, temporal: { validFrom: "2023-10-01T00:00:00Z" } },
      ];

      // Filter nodes and edges based on temporal.validFrom (if available)
      const filteredNodes = [
        ...baseNodes,
        ...timeBasedNodes.filter(node => new Date(node.temporal.validFrom).getTime() <= timestamp)
      ];

      const filteredEdges = [
        ...baseEdges,
        ...timeBasedEdges.filter(edge => new Date(edge.temporal.validFrom).getTime() <= timestamp)
      ];

      setGraphData({ nodes: filteredNodes, edges: filteredEdges });
      setLoading(false);
    }, 500);
  };

  // Export current graph schema as a JSON file
  const handleExportSchema = () => {
    if (!graphData) return;
    const exportData = { graph: graphData };
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'graph-schema.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Import a new graph schema from a JSON file
  const handleImportSchema = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = e => {
      try {
        const imported = JSON.parse(e.target.result);
        // Support both { graph: { nodes, edges, metadata } } and a direct { nodes, edges } structure
        const newGraph = imported.graph ? imported.graph : imported;
        setGraphData(newGraph);
        // Disable timeline for imported schemas
        setTimelineData([]);
        setIsPlaying(false);
        setCurrentTime(0);
      } catch (error) {
        console.error("Error parsing imported schema:", error);
      }
    };
    reader.readAsText(file);
  };

  // Format timestamp to readable date
  const formatDate = (timestamp) => new Date(timestamp).toLocaleDateString();

  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || {};
  const keyEvents = [
    { timestamp: 1675209600000, description: "Website Redesign project started" },
    { timestamp: 1680307200000, description: "React technology adopted" },
    { timestamp: 1682899200000, description: "Mobile App project launched" },
    { timestamp: 1688169600000, description: "Alex Chen joined the company" },
    { timestamp: 1693526400000, description: "Node.js implemented in Mobile App" }
  ];
  const currentEvent = keyEvents.find(event => event.timestamp === currentTime);

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Temporal Graph Explorer</h1>
          <div className="px-4 py-2 bg-white bg-opacity-20 rounded">{formatDate(currentTime)}</div>
        </div>
      </header>

      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["Person", "Company", "Project", "Technology"].map(label => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["WORKS_AT", "MANAGES", "WORKS_ON", "USES"].map(type => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          {/* Export/Import Section */}
          <div className="mb-4">
            <h2 className="text-lg font-semibold mb-2">Schema</h2>
            <button 
              onClick={handleExportSchema}
              className="w-full py-2 mb-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition"
            >
              Export Schema
            </button>
            <button 
              onClick={() => fileInputRef.current && fileInputRef.current.click()}
              className="w-full py-2 bg-green-600 text-white rounded hover:bg-green-700 transition"
            >
              Import Schema
            </button>
            <input 
              type="file" 
              accept="application/json" 
              ref={fileInputRef} 
              onChange={handleImportSchema}
              style={{ display: 'none' }}
            />
          </div>
          {/* AI Assistant Section */}
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea 
              className="w-full p-2 border rounded h-24 text-sm"
              placeholder="Ask a question about the graph data..."
            ></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
              Ask AI
            </button>
          </div>
        </div>

        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline Control (hidden if timelineData is empty) */}
          {timelineData.length > 0 && (
            <div className="bg-white border-b p-4 flex flex-col space-y-4">
              <div className="flex items-center space-x-4">
                <button 
                  onClick={() => setIsPlaying(!isPlaying)}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center justify-center w-24"
                >
                  {isPlaying ? 'Pause' : 'Play'}
                </button>
                <div className="flex space-x-2">
                  <button 
                    onClick={() => setPlaybackSpeed(0.5)}
                    className={`px-2 py-1 rounded text-xs ${playbackSpeed === 0.5 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                  >
                    0.5x
                  </button>
                  <button 
                    onClick={() => setPlaybackSpeed(1)}
                    className={`px-2 py-1 rounded text-xs ${playbackSpeed === 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                  >
                    1x
                  </button>
                  <button 
                    onClick={() => setPlaybackSpeed(2)}
                    className={`px-2 py-1 rounded text-xs ${playbackSpeed === 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                  >
                    2x
                  </button>
                </div>
                <div className="text-sm font-medium">{formatDate(currentTime)}</div>
                {currentEvent && (
                  <div className="flex-1 ml-4 text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-500">
                    <span className="font-medium">Event:</span> {currentEvent.description}
                  </div>
                )}
              </div>
              <div className="flex-1">
                <input
                  type="range"
                  min={timelineData[0].timestamp}
                  max={timelineData[timelineData.length - 1].timestamp}
                  value={currentTime}
                  onChange={(e) => setCurrentTime(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                </div>
              </div>
            </div>
          )}

          {/* Graph Visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                <div className="ml-4 text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                <div className="absolute top-4 left-4 bg-white p-2 rounded shadow-sm z-10">
                  <div className="text-sm font-medium border-b pb-1 mb-1">Graph Statistics</div>
                  <div className="text-sm"><strong>Nodes:</strong> {currentTimelinePoint.nodeCount || 0}</div>
                  <div className="text-sm"><strong>Edges:</strong> {currentTimelinePoint.edgeCount || 0}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>
                <GraphVisualization graphData={graphData} onNodeSelect={setSelectedNode} />
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">Person</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">Company</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">Project</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Technology</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Right Sidebar - Details Panel */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button 
                  className="text-gray-400 hover:text-gray-600"
                  onClick={() => setSelectedNode(null)}
                >
                  ×
                </button>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium"
                  style={{ 
                    backgroundColor: 
                      selectedNode.label === 'Person' ? '#bee3f8' :
                      selectedNode.label === 'Company' ? '#feebc8' :
                      selectedNode.label === 'Project' ? '#c6f6d5' :
                      selectedNode.label === 'Technology' ? '#e9d8fd' : '#bee3f8',
                    color:
                      selectedNode.label === 'Person' ? '#2c5282' :
                      selectedNode.label === 'Company' ? '#7b341e' :
                      selectedNode.label === 'Project' ? '#276749' :
                      selectedNode.label === 'Technology' ? '#553c9a' : '#2c5282',
                  }}
                >
                  {selectedNode.label}
                </div>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">
                  Find Related Nodes
                </button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">
                  View History
                </button>
              </div>
            </div>
          ) : (
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the graph data!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze temporal patterns</li>
                  <li>Find relationships between nodes</li>
                  <li>Explain graph evolution</li>
                  <li>Discover paths between entities</li>
                </ul>
              </div>
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How has the graph evolved over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What connections exist between John and the Website Redesign project?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    Which month had the most significant changes?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CytoscapeGraphViz2;


====================================================================================================

File: src/components/pages/TemporalGraphExplorer.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect } from 'react';

// Main App Component
const TemporalGraphExplorer = () => {
  // State management
  const [currentTime, setCurrentTime] = useState(1698796800000); // Nov 1, 2023
  const [graphData, setGraphData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  const [timelineData, setTimelineData] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);

  // Load mock data
  useEffect(() => {
    const mockTimelineData = [
      { timestamp: 1672531200000, nodeCount: 45, edgeCount: 67, changes: 0, date: "Jan 2023" },
      { timestamp: 1675209600000, nodeCount: 52, edgeCount: 78, changes: 18, date: "Feb 2023" },
      { timestamp: 1677628800000, nodeCount: 58, edgeCount: 92, changes: 20, date: "Mar 2023" },
      { timestamp: 1680307200000, nodeCount: 62, edgeCount: 103, changes: 15, date: "Apr 2023" },
      { timestamp: 1682899200000, nodeCount: 71, edgeCount: 126, changes: 32, date: "May 2023" },
      { timestamp: 1685577600000, nodeCount: 73, edgeCount: 131, changes: 7, date: "Jun 2023" },
      { timestamp: 1688169600000, nodeCount: 79, edgeCount: 142, changes: 17, date: "Jul 2023" },
      { timestamp: 1690848000000, nodeCount: 84, edgeCount: 155, changes: 18, date: "Aug 2023" },
      { timestamp: 1693526400000, nodeCount: 86, edgeCount: 161, changes: 8, date: "Sep 2023" },
      { timestamp: 1696118400000, nodeCount: 90, edgeCount: 170, changes: 13, date: "Oct 2023" },
      { timestamp: 1698796800000, nodeCount: 94, edgeCount: 182, changes: 16, date: "Nov 2023" },
      { timestamp: 1701388800000, nodeCount: 98, edgeCount: 193, changes: 15, date: "Dec 2023" },
    ];
    
    setTimelineData(mockTimelineData);
    loadGraphData(currentTime);
  }, []);

  // Play/pause timeline animation
  useEffect(() => {
    let interval;
    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000);
    }
    
    return () => clearInterval(interval);
  }, [isPlaying, timelineData]);

  // Update graph data when time changes
  useEffect(() => {
    if (currentTime) {
      loadGraphData(currentTime);
    }
  }, [currentTime]);

  // Load graph data for a specific timestamp
  const loadGraphData = (timestamp) => {
    setLoading(true);
    
    // Simulate API call with delayed response
    setTimeout(() => {
      // Filter nodes and edges based on timestamp (more would appear over time)
      const timeIndex = timelineData.findIndex(t => t.timestamp === timestamp);
      const nodeCount = timelineData[timeIndex]?.nodeCount || 45;
      
      // Base nodes that are always present
      const baseNodes = [
        { id: "1", label: "Person", properties: { name: "John Smith", age: 34 }, x: 100, y: 100 },
        { id: "2", label: "Person", properties: { name: "Emma Johnson", age: 29 }, x: 250, y: 150 },
        { id: "3", label: "Company", properties: { name: "Acme Corp", founded: 2005 }, x: 175, y: 250 },
      ];
      
      // Additional nodes that appear over time
      const timeBasedNodes = [
        { id: "4", label: "Project", properties: { name: "Website Redesign", budget: 50000 }, x: 300, y: 120, minTime: 1675209600000 },
        { id: "5", label: "Technology", properties: { name: "React", version: "18.2" }, x: 400, y: 170, minTime: 1680307200000 },
        { id: "6", label: "Project", properties: { name: "Mobile App", budget: 75000 }, x: 350, y: 250, minTime: 1682899200000 },
        { id: "7", label: "Person", properties: { name: "Alex Chen", age: 31 }, x: 150, y: 350, minTime: 1688169600000 },
        { id: "8", label: "Technology", properties: { name: "Node.js", version: "18.0" }, x: 450, y: 300, minTime: 1693526400000 },
      ];
      
      // Base edges that are always present
      const baseEdges = [
        { id: "e1", source: "1", target: "3", type: "WORKS_AT", properties: { since: 2018 } },
        { id: "e2", source: "2", target: "3", type: "WORKS_AT", properties: { since: 2020 } },
      ];
      
      // Additional edges that appear over time
      const timeBasedEdges = [
        { id: "e3", source: "3", target: "4", type: "MANAGES", properties: { startDate: "2023-02-15" }, minTime: 1675209600000 },
        { id: "e4", source: "1", target: "4", type: "WORKS_ON", properties: { role: "Project Manager" }, minTime: 1677628800000 },
        { id: "e5", source: "2", target: "4", type: "WORKS_ON", properties: { role: "Developer" }, minTime: 1677628800000 },
        { id: "e6", source: "4", target: "5", type: "USES", properties: { criticality: "High" }, minTime: 1680307200000 },
        { id: "e7", source: "3", target: "6", type: "MANAGES", properties: { startDate: "2023-05-10" }, minTime: 1682899200000 },
        { id: "e8", source: "2", target: "6", type: "WORKS_ON", properties: { role: "Team Lead" }, minTime: 1685577600000 },
        { id: "e9", source: "7", target: "3", type: "WORKS_AT", properties: { since: 2023 }, minTime: 1688169600000 },
        { id: "e10", source: "7", target: "6", type: "WORKS_ON", properties: { role: "Developer" }, minTime: 1690848000000 },
        { id: "e11", source: "6", target: "8", type: "USES", properties: { criticality: "Medium" }, minTime: 1693526400000 },
        { id: "e12", source: "7", target: "4", type: "WORKS_ON", properties: { role: "Support" }, minTime: 1696118400000 },
      ];

      // Filter based on timestamp
      const filteredNodes = [
        ...baseNodes,
        ...timeBasedNodes.filter(node => node.minTime <= timestamp)
      ];
      
      const filteredEdges = [
        ...baseEdges,
        ...timeBasedEdges.filter(edge => edge.minTime <= timestamp)
      ];

      const graphData = {
        nodes: filteredNodes,
        edges: filteredEdges
      };
      
      setGraphData(graphData);
      setLoading(false);
    }, 500);
  };

  // Format timestamp to readable date
  const formatDate = (timestamp) => {
    return new Date(timestamp).toLocaleDateString();
  };

  // Get current timeline data point
  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || {};

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Temporal Graph Explorer</h1>
          <div className="px-4 py-2 bg-white bg-opacity-20 rounded">
            {formatDate(currentTime)}
          </div>
        </div>
      </header>
      
      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left sidebar */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["Person", "Company", "Project", "Technology"].map(label => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["WORKS_AT", "MANAGES", "WORKS_ON", "USES"].map(type => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea 
              className="w-full p-2 border rounded h-24 text-sm"
              placeholder="Ask a question about the graph data..."
            ></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
              Ask AI
            </button>
          </div>
        </div>
        
        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline control */}
          <div className="bg-white border-b p-4 flex items-center space-x-4">
            <button 
              onClick={() => setIsPlaying(!isPlaying)}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              {isPlaying ? 'Pause' : 'Play'}
            </button>
            
            <div className="flex-1">
              <input
                type="range"
                min={timelineData.length > 0 ? timelineData[0].timestamp : 0}
                max={timelineData.length > 0 ? timelineData[timelineData.length - 1].timestamp : 100}
                value={currentTime}
                onChange={(e) => setCurrentTime(parseInt(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                {timelineData.length > 0 && (
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                )}
              </div>
            </div>
          </div>
          
          {/* Graph visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                {/* Graph metadata */}
                <div className="absolute top-4 left-4 bg-white bg-opacity-80 p-2 rounded shadow-sm z-10">
                  <div className="text-sm"><strong>Nodes:</strong> {currentTimelinePoint.nodeCount || 0}</div>
                  <div className="text-sm"><strong>Edges:</strong> {currentTimelinePoint.edgeCount || 0}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>
                
                {/* Simple graph visualization */}
                <div className="h-full w-full relative">
                  {/* Draw edges */}
                  <svg className="absolute inset-0 w-full h-full">
                    {graphData && graphData.edges.map(edge => {
                      const source = graphData.nodes.find(n => n.id === edge.source);
                      const target = graphData.nodes.find(n => n.id === edge.target);
                      if (!source || !target) return null;
                      
                      // Set edge colors based on type
                      const edgeColor = 
                        edge.type === 'WORKS_AT' ? '#a0aec0' :
                        edge.type === 'MANAGES' ? '#fc8181' :
                        edge.type === 'WORKS_ON' ? '#fbd38d' :
                        edge.type === 'USES' ? '#d6bcfa' : '#a0aec0';
                      
                      const midX = (source.x + target.x) / 2;
                      const midY = (source.y + target.y) / 2;
                      
                      return (
                        <g key={edge.id}>
                          <line 
                            x1={source.x} y1={source.y} 
                            x2={target.x} y2={target.y} 
                            stroke={edgeColor} 
                            strokeWidth="2"
                            markerEnd="url(#arrowhead)"
                          />
                          <text 
                            x={midX} 
                            y={midY} 
                            textAnchor="middle" 
                            fill="#4a5568" 
                            fontSize="10"
                            dy="-5"
                          >
                            {edge.type}
                          </text>
                        </g>
                      );
                    })}
                    <defs>
                      <marker 
                        id="arrowhead" 
                        markerWidth="10" 
                        markerHeight="7" 
                        refX="9" 
                        refY="3.5" 
                        orient="auto"
                      >
                        <polygon points="0 0, 10 3.5, 0 7" fill="#718096" />
                      </marker>
                    </defs>
                  </svg>
                  
                  {/* Draw nodes */}
                  {graphData && graphData.nodes.map(node => {
                    // Set node colors based on label
                    const bgColor = 
                      node.label === 'Person' ? '#4299e1' :
                      node.label === 'Company' ? '#ed8936' :
                      node.label === 'Project' ? '#48bb78' :
                      node.label === 'Technology' ? '#9f7aea' : '#4299e1';
                    
                    return (
                      <div 
                        key={node.id}
                        className="absolute rounded-full flex items-center justify-center text-white font-bold text-xs cursor-pointer transform hover:scale-110 transition"
                        style={{ 
                          left: `${node.x}px`, 
                          top: `${node.y}px`,
                          width: '40px',
                          height: '40px',
                          backgroundColor: bgColor,
                          border: selectedNode && selectedNode.id === node.id ? '2px solid white' : 'none',
                          boxShadow: selectedNode && selectedNode.id === node.id ? '0 0 0 2px black' : 'none'
                        }}
                        onClick={() => setSelectedNode(node)}
                      >
                        {node.id}
                      </div>
                    );
                  })}
                </div>
                
                {/* Legend */}
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">Person</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">Company</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">Project</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Technology</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Right Sidebar - Details Panel */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            // Node details panel
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button 
                  className="text-gray-400 hover:text-gray-600"
                  onClick={() => setSelectedNode(null)}
                >
                  ×
                </button>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium"
                  style={{ 
                    backgroundColor: 
                      selectedNode.label === 'Person' ? '#bee3f8' :
                      selectedNode.label === 'Company' ? '#feebc8' :
                      selectedNode.label === 'Project' ? '#c6f6d5' :
                      selectedNode.label === 'Technology' ? '#e9d8fd' : '#bee3f8',
                    color:
                      selectedNode.label === 'Person' ? '#2c5282' :
                      selectedNode.label === 'Company' ? '#7b341e' :
                      selectedNode.label === 'Project' ? '#276749' :
                      selectedNode.label === 'Technology' ? '#553c9a' : '#2c5282',
                  }}
                >
                  {selectedNode.label}
                </div>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">
                  Find Related Nodes
                </button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">
                  View History
                </button>
              </div>
            </div>
          ) : (
            // LLM query panel (simplified)
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the graph data!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze temporal patterns</li>
                  <li>Find relationships between nodes</li>
                  <li>Explain graph evolution</li>
                  <li>Discover paths between entities</li>
                </ul>
              </div>
              
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How has the graph evolved over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What connections exist between John and the Website Redesign project?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    Which month had the most significant changes?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TemporalGraphExplorer;


====================================================================================================

File: src/components/pages/CytoscapeGraphExplorer.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect, useRef } from 'react';

import cytoscape from 'cytoscape';

// Graph Visualization Component using Cytoscape.js
const GraphVisualization = ({ graphData, onNodeSelect }) => {
  const cyRef = useRef(null);
  const containerRef = useRef(null);
  
  // Initialize Cytoscape instance
  useEffect(() => {
    if (!graphData || !containerRef.current) return;
    
    // Convert graph data to Cytoscape format
    const elements = {
      nodes: graphData.nodes.map(node => ({
        data: { 
          id: node.id,
          label: node.label, 
          ...node.properties
        },
        position: { x: node.x, y: node.y }
      })),
      edges: graphData.edges.map(edge => ({
        data: { 
          id: edge.id, 
          source: edge.source, 
          target: edge.target, 
          label: edge.type,
          ...edge.properties
        }
      }))
    };
    
    // Define node styles based on label
    const nodeStyles = {
      'Person': {
        'background-color': '#4299e1',
        'border-color': '#2b6cb0'
      },
      'Company': {
        'background-color': '#ed8936',
        'border-color': '#c05621'
      },
      'Project': {
        'background-color': '#48bb78',
        'border-color': '#2f855a'
      },
      'Technology': {
        'background-color': '#9f7aea',
        'border-color': '#6b46c1'
      }
    };
    
    // Define edge styles based on type
    const edgeStyles = {
      'WORKS_AT': {
        'line-color': '#a0aec0',
        'target-arrow-color': '#a0aec0'
      },
      'MANAGES': {
        'line-color': '#fc8181',
        'target-arrow-color': '#fc8181'
      },
      'WORKS_ON': {
        'line-color': '#fbd38d',
        'target-arrow-color': '#fbd38d'
      },
      'USES': {
        'line-color': '#d6bcfa',
        'target-arrow-color': '#d6bcfa'
      }
    };
    
    // Create new Cytoscape instance
    cyRef.current = cytoscape({
      container: containerRef.current,
      elements: elements,
      style: [
        {
          selector: 'node',
          style: {
            'width': 40,
            'height': 40,
            'background-color': '#4299e1',
            'border-width': 2,
            'border-color': '#2b6cb0',
            'label': 'data(id)',
            'color': 'white',
            'text-halign': 'center',
            'text-valign': 'center',
            'font-size': '12px',
            'font-weight': 'bold'
          }
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#a0aec0',
            'target-arrow-color': '#a0aec0',
            'target-arrow-shape': 'triangle',
            'curve-style': 'bezier',
            'label': 'data(label)',
            'font-size': '10px',
            'text-rotation': 'autorotate',
            'text-margin-y': -10
          }
        },
        // Apply node styles based on label
        ...Object.entries(nodeStyles).map(([label, style]) => ({
          selector: `node[label = "${label}"]`,
          style: style
        })),
        // Apply edge styles based on type
        ...Object.entries(edgeStyles).map(([type, style]) => ({
          selector: `edge[label = "${type}"]`,
          style: style
        })),
        // Selected node style
        {
          selector: 'node:selected',
          style: {
            'border-width': 4,
            'border-color': '#fff',
            'box-shadow': '0 0 0 2px #000'
          }
        }
      ],
      layout: {
        name: 'preset'
      },
      userZoomingEnabled: true,
      userPanningEnabled: true,
      boxSelectionEnabled: false
    });
    
    // Add event listeners
    cyRef.current.on('tap', 'node', event => {
      const node = event.target;
      const nodeData = graphData.nodes.find(n => n.id === node.id());
      if (nodeData && onNodeSelect) {
        onNodeSelect(nodeData);
      }
    });
    
    cyRef.current.on('tap', function(event) {
      if (event.target === cyRef.current) {
        // Clicked on background
        if (onNodeSelect) {
          onNodeSelect(null);
        }
      }
    });
    
    // Clean up
    return () => {
      if (cyRef.current) {
        cyRef.current.destroy();
      }
    };
  }, [graphData, onNodeSelect]);
  
  return (
    <div ref={containerRef} style={{ width: '100%', height: '100%' }} />
  );
};

// Main App Component
const CytoscapeGraphExplorer = () => {
  // State management
  const [currentTime, setCurrentTime] = useState(1698796800000); // Nov 1, 2023
  const [graphData, setGraphData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  const [timelineData, setTimelineData] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(1);

  // Load mock data
  useEffect(() => {
    const mockTimelineData = [
      { timestamp: 1672531200000, nodeCount: 45, edgeCount: 67, changes: 0, date: "Jan 2023" },
      { timestamp: 1675209600000, nodeCount: 52, edgeCount: 78, changes: 18, date: "Feb 2023" },
      { timestamp: 1677628800000, nodeCount: 58, edgeCount: 92, changes: 20, date: "Mar 2023" },
      { timestamp: 1680307200000, nodeCount: 62, edgeCount: 103, changes: 15, date: "Apr 2023" },
      { timestamp: 1682899200000, nodeCount: 71, edgeCount: 126, changes: 32, date: "May 2023" },
      { timestamp: 1685577600000, nodeCount: 73, edgeCount: 131, changes: 7, date: "Jun 2023" },
      { timestamp: 1688169600000, nodeCount: 79, edgeCount: 142, changes: 17, date: "Jul 2023" },
      { timestamp: 1690848000000, nodeCount: 84, edgeCount: 155, changes: 18, date: "Aug 2023" },
      { timestamp: 1693526400000, nodeCount: 86, edgeCount: 161, changes: 8, date: "Sep 2023" },
      { timestamp: 1696118400000, nodeCount: 90, edgeCount: 170, changes: 13, date: "Oct 2023" },
      { timestamp: 1698796800000, nodeCount: 94, edgeCount: 182, changes: 16, date: "Nov 2023" },
      { timestamp: 1701388800000, nodeCount: 98, edgeCount: 193, changes: 15, date: "Dec 2023" },
    ];
    
    setTimelineData(mockTimelineData);
    loadGraphData(currentTime);
  }, []);

  // Play/pause timeline animation
  useEffect(() => {
    let interval;
    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  // Update graph data when time changes
  useEffect(() => {
    if (currentTime) {
      loadGraphData(currentTime);
    }
  }, [currentTime]);

  // Load graph data for a specific timestamp
  const loadGraphData = (timestamp) => {
    setLoading(true);
    
    // Simulate API call with delayed response
    setTimeout(() => {
      // Filter nodes and edges based on timestamp (more would appear over time)
      const timeIndex = timelineData.findIndex(t => t.timestamp === timestamp);
      
      // Base nodes that are always present
      const baseNodes = [
        { id: "1", label: "Person", properties: { name: "John Smith", age: 34 }, x: 100, y: 100 },
        { id: "2", label: "Person", properties: { name: "Emma Johnson", age: 29 }, x: 250, y: 150 },
        { id: "3", label: "Company", properties: { name: "Acme Corp", founded: 2005 }, x: 175, y: 250 },
      ];
      
      // Additional nodes that appear over time
      const timeBasedNodes = [
        { id: "4", label: "Project", properties: { name: "Website Redesign", budget: 50000 }, x: 300, y: 120, minTime: 1675209600000 },
        { id: "5", label: "Technology", properties: { name: "React", version: "18.2" }, x: 400, y: 170, minTime: 1680307200000 },
        { id: "6", label: "Project", properties: { name: "Mobile App", budget: 75000 }, x: 350, y: 250, minTime: 1682899200000 },
        { id: "7", label: "Person", properties: { name: "Alex Chen", age: 31 }, x: 150, y: 350, minTime: 1688169600000 },
        { id: "8", label: "Technology", properties: { name: "Node.js", version: "18.0" }, x: 450, y: 300, minTime: 1693526400000 },
      ];
      
      // Base edges that are always present
      const baseEdges = [
        { id: "e1", source: "1", target: "3", type: "WORKS_AT", properties: { since: 2018 } },
        { id: "e2", source: "2", target: "3", type: "WORKS_AT", properties: { since: 2020 } },
      ];
      
      // Additional edges that appear over time
      const timeBasedEdges = [
        { id: "e3", source: "3", target: "4", type: "MANAGES", properties: { startDate: "2023-02-15" }, minTime: 1675209600000 },
        { id: "e4", source: "1", target: "4", type: "WORKS_ON", properties: { role: "Project Manager" }, minTime: 1677628800000 },
        { id: "e5", source: "2", target: "4", type: "WORKS_ON", properties: { role: "Developer" }, minTime: 1677628800000 },
        { id: "e6", source: "4", target: "5", type: "USES", properties: { criticality: "High" }, minTime: 1680307200000 },
        { id: "e7", source: "3", target: "6", type: "MANAGES", properties: { startDate: "2023-05-10" }, minTime: 1682899200000 },
        { id: "e8", source: "2", target: "6", type: "WORKS_ON", properties: { role: "Team Lead" }, minTime: 1685577600000 },
        { id: "e9", source: "7", target: "3", type: "WORKS_AT", properties: { since: 2023 }, minTime: 1688169600000 },
        { id: "e10", source: "7", target: "6", type: "WORKS_ON", properties: { role: "Developer" }, minTime: 1690848000000 },
        { id: "e11", source: "6", target: "8", type: "USES", properties: { criticality: "Medium" }, minTime: 1693526400000 },
        { id: "e12", source: "7", target: "4", type: "WORKS_ON", properties: { role: "Support" }, minTime: 1696118400000 },
      ];

      // Filter based on timestamp
      const filteredNodes = [
        ...baseNodes,
        ...timeBasedNodes.filter(node => node.minTime <= timestamp)
      ];
      
      const filteredEdges = [
        ...baseEdges,
        ...timeBasedEdges.filter(edge => edge.minTime <= timestamp)
      ];

      const graphData = {
        nodes: filteredNodes,
        edges: filteredEdges
      };
      
      setGraphData(graphData);
      setLoading(false);
    }, 500);
  };

  // Format timestamp to readable date
  const formatDate = (timestamp) => {
    return new Date(timestamp).toLocaleDateString();
  };

  // Get current timeline data point
  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || {};

  // Key events in the timeline
  const keyEvents = [
    { timestamp: 1675209600000, description: "Website Redesign project started" },
    { timestamp: 1680307200000, description: "React technology adopted" },
    { timestamp: 1682899200000, description: "Mobile App project launched" },
    { timestamp: 1688169600000, description: "Alex Chen joined the company" },
    { timestamp: 1693526400000, description: "Node.js implemented in Mobile App" }
  ];

  // Get current event if there is one
  const currentEvent = keyEvents.find(event => event.timestamp === currentTime);

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Temporal Graph Explorer</h1>
          <div className="px-4 py-2 bg-white bg-opacity-20 rounded">
            {formatDate(currentTime)}
          </div>
        </div>
      </header>
      
      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left sidebar */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["Person", "Company", "Project", "Technology"].map(label => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["WORKS_AT", "MANAGES", "WORKS_ON", "USES"].map(type => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea 
              className="w-full p-2 border rounded h-24 text-sm"
              placeholder="Ask a question about the graph data..."
            ></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
              Ask AI
            </button>
          </div>
        </div>
        
        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline control */}
          <div className="bg-white border-b p-4 flex flex-col space-y-4">
            <div className="flex items-center space-x-4">
              <button 
                onClick={() => setIsPlaying(!isPlaying)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center justify-center w-24"
              >
                {isPlaying ? 'Pause' : 'Play'}
              </button>
              
              <div className="flex space-x-2">
                <button 
                  onClick={() => setPlaybackSpeed(0.5)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 0.5 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  0.5x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(1)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  1x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(2)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  2x
                </button>
              </div>
              
              <div className="text-sm font-medium">
                {formatDate(currentTime)}
              </div>
              
              {currentEvent && (
                <div className="flex-1 ml-4 text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-500">
                  <span className="font-medium">Event:</span> {currentEvent.description}
                </div>
              )}
            </div>
            
            <div className="flex-1">
              <input
                type="range"
                min={timelineData.length > 0 ? timelineData[0].timestamp : 0}
                max={timelineData.length > 0 ? timelineData[timelineData.length - 1].timestamp : 100}
                value={currentTime}
                onChange={(e) => setCurrentTime(parseInt(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                {timelineData.length > 0 && (
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                )}
              </div>
            </div>
          </div>
          
          {/* Graph visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                <div className="ml-4 text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                {/* Graph metadata */}
                <div className="absolute top-4 left-4 bg-white p-2 rounded shadow-sm z-10">
                  <div className="text-sm font-medium border-b pb-1 mb-1">Graph Statistics</div>
                  <div className="text-sm"><strong>Nodes:</strong> {currentTimelinePoint.nodeCount || 0}</div>
                  <div className="text-sm"><strong>Edges:</strong> {currentTimelinePoint.edgeCount || 0}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>
                
                {/* Cytoscape visualization */}
                <GraphVisualization 
                  graphData={graphData} 
                  onNodeSelect={setSelectedNode}
                />
                
                {/* Legend */}
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">Person</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">Company</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">Project</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Technology</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Right Sidebar - Details Panel */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            // Node details panel
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button 
                  className="text-gray-400 hover:text-gray-600"
                  onClick={() => setSelectedNode(null)}
                >
                  ×
                </button>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium"
                  style={{ 
                    backgroundColor: 
                      selectedNode.label === 'Person' ? '#bee3f8' :
                      selectedNode.label === 'Company' ? '#feebc8' :
                      selectedNode.label === 'Project' ? '#c6f6d5' :
                      selectedNode.label === 'Technology' ? '#e9d8fd' : '#bee3f8',
                    color:
                      selectedNode.label === 'Person' ? '#2c5282' :
                      selectedNode.label === 'Company' ? '#7b341e' :
                      selectedNode.label === 'Project' ? '#276749' :
                      selectedNode.label === 'Technology' ? '#553c9a' : '#2c5282',
                  }}
                >
                  {selectedNode.label}
                </div>
              </div>
              
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">
                  Find Related Nodes
                </button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">
                  View History
                </button>
              </div>
            </div>
          ) : (
            // LLM query panel (simplified)
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the graph data!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze temporal patterns</li>
                  <li>Find relationships between nodes</li>
                  <li>Explain graph evolution</li>
                  <li>Discover paths between entities</li>
                </ul>
              </div>
              
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How has the graph evolved over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What connections exist between John and the Website Redesign project?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    Which month had the most significant changes?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CytoscapeGraphExplorer;


====================================================================================================

File: src/components/pages/PlaceholderPage.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect } from 'react';

import Link from 'next/link';

const PlaceholderPage: React.FC = () => {
  const [currentPhrase, setCurrentPhrase] = useState('');
  const [phraseIndex, setPhraseIndex] = useState(0);
  const [charIndex, setCharIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);
  const [cursorVisible, setCursorVisible] = useState(true);
  const [bgPosition, setBgPosition] = useState({ x: 0, y: 0 });
  
  const phrases = [
    "This is not the page you are looking for...",
    "But perhaps it's the one you need...",
    "Creating something extraordinary...",
    "Building the next breakthrough...",
    "Innovation starts here..."
  ];

  // Typing effect
  useEffect(() => {
    const typingSpeed = isDeleting ? 30 : 100;
    const timer = setTimeout(() => {
      if (!isDeleting && charIndex < phrases[phraseIndex].length) {
        setCurrentPhrase(prev => prev + phrases[phraseIndex][charIndex]);
        setCharIndex(charIndex + 1);
      } else if (isDeleting && charIndex > 0) {
        setCurrentPhrase(phrases[phraseIndex].substring(0, charIndex - 1));
        setCharIndex(charIndex - 1);
      } else if (charIndex === phrases[phraseIndex].length) {
        setTimeout(() => setIsDeleting(true), 1500);
      } else if (charIndex === 0 && isDeleting) {
        setIsDeleting(false);
        setPhraseIndex((phraseIndex + 1) % phrases.length);
      }
    }, typingSpeed);

    return () => clearTimeout(timer);
  }, [charIndex, isDeleting, phraseIndex, phrases]);

  // Cursor blinking effect
  useEffect(() => {
    const cursorTimer = setInterval(() => {
      setCursorVisible(prev => !prev);
    }, 500);

    // Add animation styles to document head
    const styleEl = document.createElement('style');
    styleEl.innerHTML = `
      @keyframes float {
        0% {
          transform: translateY(0) translateX(0);
          opacity: 0;
        }
        10% {
          opacity: 0.3;
        }
        90% {
          opacity: 0.3;
        }
        100% {
          transform: translateY(-1000px) translateX(100px);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(styleEl);

    return () => {
      clearInterval(cursorTimer);
      document.head.removeChild(styleEl);
    };
  }, []);

  // Interactive background movement
  const handleMouseMove = (e: React.MouseEvent) => {
    const x = e.clientX / window.innerWidth;
    const y = e.clientY / window.innerHeight;
    setBgPosition({ x, y });
  };

  return (
    <div 
      onMouseMove={handleMouseMove}
      className="relative flex flex-col items-center justify-center min-h-screen w-full overflow-hidden py-20 bg-gradient-to-br from-indigo-900 via-purple-800 to-pink-700"
      style={{
        backgroundPosition: `${bgPosition.x * 10}% ${bgPosition.y * 10}%`,
        transition: 'background-position 0.2s ease-out'
      }}
    >
      {/* Animated particles */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <div 
            key={i}
            className="absolute rounded-full bg-white opacity-30"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              width: `${Math.random() * 50 + 10}px`,
              height: `${Math.random() * 50 + 10}px`,
              animation: `float ${Math.random() * 10 + 15}s linear infinite`,
              animationDelay: `${Math.random() * 5}s`
            }}
          />
        ))}
      </div>

      <div className="z-10 text-center px-4 max-w-2xl backdrop-blur-sm bg-black/20 p-8 rounded-lg shadow-2xl border border-white/20">
        <h1 className="text-5xl font-bold text-white mb-8 animate-pulse">
          404 <span className="text-pink-400">Wormhole</span>
        </h1>
        
        <div className="h-20 flex items-center justify-center mb-8">
          <h2 className="text-2xl font-bold text-white">
            {currentPhrase}
            <span className={`ml-1 ${cursorVisible ? 'opacity-100' : 'opacity-0'} transition-opacity`}>|</span>
          </h2>
        </div>
        
        <div className="space-y-6">
          <p className="text-lg text-gray-200 mb-8">
            While you're here, why not explore something amazing?
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link 
              to="https://www.anthropic.com/news/claude-3-7-sonnet" 
              className="bg-purple-600 text-white px-6 py-3 rounded-md hover:bg-purple-500 transition-colors duration-300 shadow-lg transform hover:scale-105 flex items-center justify-center"
            >
              <span className="mr-2">🤖</span> Claude 3.7 Sonnet
            </Link>
            
            <Link 
              to="/" 
              className="bg-pink-600 text-white px-6 py-3 rounded-md hover:bg-pink-500 transition-colors duration-300 shadow-lg transform hover:scale-105 flex items-center justify-center"
            >
              <span className="mr-2">🏠</span> Return Home
            </Link>
          </div>
        </div>
      </div>

      {/* Easter egg - hidden interactive element */}
      <div 
        className="absolute bottom-4 right-4 w-8 h-8 rounded-full bg-white/10 hover:bg-white/30 cursor-pointer transition-all duration-300 flex items-center justify-center text-white/50 hover:text-white"
        onClick={() => alert('You found the secret! The universe acknowledges your curiosity.')}
        title="What happens if you click me?"
      >
        ?
      </div>


    </div>
  );
};

export default PlaceholderPage;


====================================================================================================

File: src/components/pages/NotFoundPage.tsx
--------------------------------------------------------------------------------
'use client'

import Link from 'next/link';

const NotFoundPage: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-center py-20">
      <h1 className="text-4xl font-bold text-gray-800 mb-4">404 - Page Not Found</h1>
      <p className="text-lg text-gray-600 mb-8">The page you are looking for doesn't exist or has been moved.</p>
      <Link href="/" className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-500">
        Go Home
      </Link>
    </div>
  );
};

export default NotFoundPage;


====================================================================================================

File: src/components/pages/LifeSciencesGraphViz1.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect, useRef, useMemo } from 'react';

import cytoscape from 'cytoscape';
import { nodeTypeColors, edgeTypeColors } from '../../utils/colors';

interface GraphNode {
  id: string;
  label: string;
  properties: Record<string, any>;
  layout?: {
    x: number;
    y: number;
  };
  temporal?: {
    validFrom?: string;
    validTo?: string;
  };
}

interface GraphEdge {
  id: string;
  source: string;
  target: string;
  type: string;
  properties: Record<string, any>;
  temporal?: {
    validFrom?: string;
    validTo?: string;
  };
}

interface GraphData {
  nodes: GraphNode[];
  edges: GraphEdge[];
  metadata?: {
    schemaVersion: string;
    graphType: string;
    description: string;
    author: string;
    lastUpdated: string;
    keyEvents?: Array<{
      timestamp: string;
      description: string;
    }>;
  };
}

interface GraphVisualizationProps {
  graphData: {
    nodes: GraphNode[];
    edges: GraphEdge[];
  };
  onNodeSelect: (node: GraphNode | null) => void;
  layoutType: string; // Add this prop
}

const GraphVisualization = React.memo(({ graphData, onNodeSelect, layoutType }: GraphVisualizationProps) => {
  const cyRef = useRef<any>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!graphData || !containerRef.current) return;

    // First ensure any previous instance is properly destroyed
    if (cyRef.current) {
      cyRef.current.destroy();
      cyRef.current = null;
    }

    // Then create a new instance with a short delay to ensure DOM stability
    const timer = setTimeout(() => {
      if (!containerRef.current) return; // Double check container still exists

      // Convert the ontology-based graph data to Cytoscape elements
      const elements = {
        nodes: graphData.nodes.map((node: any) => ({
          data: {
            id: node.id,
            // Use the human-friendly name for display
            label: node.properties["schema:name"] || node.id,
            // Preserve the original ontology label (e.g., "schema:ClinicalTrial")
            ontology: node.label,
            ...node.properties
          },
          // Use provided layout if available; if not, let the layout algorithm compute positions.
          position: node.layout ? { x: node.layout.x, y: node.layout.y } : undefined
        })),
        edges: graphData.edges.map((edge: any) => ({
          data: {
            id: edge.id,
            source: edge.source,
            target: edge.target,
            // Use the edge type as label for styling
            label: edge.type,
            ...edge.properties
          }
        }))
      };

      // Define ontology-specific node styles using the new "ontology" property.
      const nodeStyles = nodeTypeColors;

      // Define edge styles based on relationship type.
      const edgeStyles = edgeTypeColors;

      cyRef.current = cytoscape({
        container: containerRef.current,
        elements,
        style: [
          {
            selector: 'node',
            style: {
              'width': 40,
              'height': 40,
              'background-color': '#ddd', // fallback color
              'border-width': 2,
              'border-color': '#888',
              'label': 'data(label)',
              'color': 'white',
              'text-halign': 'center',
              'text-valign': 'center',
              'font-size': '6px',
              'font-weight': 'bold',
              'text-wrap': 'wrap',
              'text-max-width': '100px'
            }
          },
          {
            selector: 'edge',
            style: {
              'width': 2,
              'line-color': '#a0aec0',
              'target-arrow-color': '#a0aec0',
              'target-arrow-shape': 'triangle',
              'curve-style': 'bezier',
              'label': 'data(label)',
              'font-size': '6px',
              'text-rotation': 'autorotate',
              'text-margin-y': -10
            }
          },
          // Apply ontology-specific node styles using the "ontology" property.
          ...Object.entries(nodeStyles).map(([ontology, style]) => ({
            selector: `node[ontology = "${ontology}"]`,
            style: style
          })),
          // Apply edge styles based on relationship type.
          ...Object.entries(edgeStyles).map(([edgeType, style]) => ({
            selector: `edge[label = "${edgeType}"]`,
            style: style
          })),
          {
            selector: 'node:selected',
            style: {
              'border-width': 4,
              'border-color': '#fff'
              // 'box-shadow': '0 0 0 2px #000'
            }
          }
        ],
        // Use a force-directed (physics-enabled) layout rather than a preset layout.
        layout: {
          name: layoutType,
          // animate: layoutType !== 'preset',
          // padding: 30,
          fit: true,
          randomize: true
        },
        userZoomingEnabled: true,
        userPanningEnabled: true,
        boxSelectionEnabled: false
      });

      cyRef.current.on('tap', 'node', event => {
        const node = event.target;
        const nodeData = graphData.nodes.find((n: any) => n.id === node.id());
        if (nodeData && onNodeSelect) onNodeSelect(nodeData);
      });

      cyRef.current.on('tap', event => {
        if (event.target === cyRef.current && onNodeSelect) onNodeSelect(null);
      });
    }, 50); // Short delay to ensure DOM is ready

    return () => {
      clearTimeout(timer);
      if (cyRef.current) {
        cyRef.current.destroy();
        cyRef.current = null;
      }
    };
  }, [graphData, onNodeSelect, layoutType]);

  useEffect(() => {
    // Add keyboard event listeners for navigation
    const handleKeyDown = (event) => {
      if (!cyRef.current) return;
      
      switch(event.key) {
        case 'ArrowUp':
          cyRef.current.panBy({ x: 0, y: 50 });
          break;
        case 'ArrowDown':
          cyRef.current.panBy({ x: 0, y: -50 });
          break;
        case 'ArrowLeft':
          cyRef.current.panBy({ x: 50, y: 0 });
          break;
        case 'ArrowRight':
          cyRef.current.panBy({ x: -50, y: 0 });
          break;
        case '+':
          cyRef.current.zoom(cyRef.current.zoom() * 1.1);
          break;
        case '-':
          cyRef.current.zoom(cyRef.current.zoom() / 1.1);
          break;
      }
    };
    
    containerRef.current.tabIndex = 0; // Make div focusable
    containerRef.current.addEventListener('keydown', handleKeyDown);
    
    return () => {
      if (containerRef.current) {
        containerRef.current.removeEventListener('keydown', handleKeyDown);
      }
    };
  }, []);

  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;
});

// JSON schema for the clinical trials knowledge graph is defined externally.
// For this app, we focus on the ontology-based clinical trials data.

const defaultGraphData = {
  graph: {
    nodes: [
      {
        "id": "1",
        "label": "schema:MedicalOrganization",
        "properties": {
          "schema:name": "AstraZeneca",
          "schema:location": "UK"
        }
      },
      {
        "id": "2",
        "label": "schema:ClinicalTrial",
        "properties": {
          "schema:identifier": "NCT04516746",
          "schema:name": "AZD7442 for COVID-19 Prevention",
          "schema:phase": "Phase 3",
          "schema:status": "Completed",
          "schema:startDate": "2020-08-18",
          "schema:endDate": "2022-10-01"
        },
        "temporal": {
          "validFrom": "2020-08-18T00:00:00Z",
          "validTo": "2022-10-01T00:00:00Z"
        }
      },
      {
        "id": "3",
        "label": "schema:Drug",
        "properties": {
          "schema:name": "AZD7442",
          "schema:dosageForm": "Injection",
          "schema:mechanismOfAction": "Monoclonal Antibody",
          "schema:indication": "COVID-19 Prevention"
        }
      },
      {
        "id": "4",
        "label": "schema:MedicalCondition",
        "properties": {
          "schema:name": "COVID-19",
          "schema:ICD10": "U07.1"
        }
      },
      {
        "id": "5",
        "label": "schema:GovernmentOrganization",
        "properties": {
          "schema:name": "U.S. Food and Drug Administration",
          "schema:abbreviation": "FDA"
        }
      },
      {
        "id": "6",
        "label": "schema:RegulatoryApproval",
        "properties": {
          "schema:identifier": "EUA-AZD7442",
          "schema:status": "Emergency Use Authorization",
          "schema:approvalDate": "2021-12-08"
        },
        "temporal": {
          "validFrom": "2021-12-08T00:00:00Z"
        }
      }
    ],
    edges: [
      {
        "id": "e1",
        "source": "1",
        "target": "2",
        "type": "schema:fundedBy",
        "properties": {
          "schema:role": "Sponsor"
        }
      },
      {
        "id": "e2",
        "source": "2",
        "target": "3",
        "type": "schema:testedDrug",
        "properties": {
          "schema:dosage": "600 mg"
        }
      },
      {
        "id": "e3",
        "source": "2",
        "target": "4",
        "type": "schema:relatedTo",
        "properties": {
          "schema:focus": "COVID-19 Prevention"
        }
      },
      {
        "id": "e4",
        "source": "3",
        "target": "6",
        "type": "schema:approvedBy",
        "properties": {
          "schema:approvingAgency": "FDA"
        },
        "temporal": {
          "validFrom": "2021-12-08T00:00:00Z"
        }
      },
      {
        "id": "e5",
        "source": "6",
        "target": "5",
        "type": "schema:approvedBy",
        "properties": {
          "schema:approvingAgency": "FDA"
        }
      }
    ],
    metadata: {
      schemaVersion: "4.0",
      graphType: "directed",
      description: "Clinical trials and approvals of AstraZeneca's AZD7442 for COVID-19 prevention",
      author: "Clinical Graph Research Team",
      lastUpdated: "2025-02-28T00:00:00Z"
    }
  }
};

const LifeSciencesViz1 = () => {
  const [fullGraphData, setFullGraphData] = useState<any>(defaultGraphData.graph);
  const [currentTime, setCurrentTime] = useState<number>(new Date("2025-02-28T00:00:00Z").getTime());
  const [timelineData, setTimelineData] = useState<any[]>([]);
  const [isPlaying, setIsPlaying] = useState<boolean>(false);
  const [playbackSpeed, setPlaybackSpeed] = useState<number>(1);
  const [loading, setLoading] = useState<boolean>(true);
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [importError, setImportError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [metadataVisible, setMetadataVisible] = useState<boolean>(false);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [layoutType, setLayoutType] = useState<string>('cose');

  // Create timeline data from key events (for simplicity, we'll simulate monthly points)
  useEffect(() => {
    const start = new Date("2020-08-01T00:00:00Z").getTime();
    const end = new Date("2025-02-28T00:00:00Z").getTime();
    const points = [];
    for (let time = start; time <= end; time += 1000 * 60 * 60 * 24 * 30) {
      points.push({
        timestamp: time,
        date: new Date(time).toLocaleDateString(),
        nodeCount: Math.floor(Math.random() * 10) + 5,
        edgeCount: Math.floor(Math.random() * 10) + 5,
        changes: Math.floor(Math.random() * 5)
      });
    }
    setTimelineData(points);
  }, []);

  // Update displayed graph based on current time (filter nodes/edges by temporal.validFrom/validTo)
  const displayedGraphData = useMemo(() => {
    if (!fullGraphData) return { nodes: [], edges: [] };
    
    // Filter nodes by temporal validity
    const filteredNodes = fullGraphData.nodes.filter((node: GraphNode) => {
      if (!node.temporal || !node.temporal.validFrom) return true;
      const validFrom = new Date(node.temporal.validFrom).getTime();
      const validTo = node.temporal.validTo ? new Date(node.temporal.validTo).getTime() : Infinity;
      return validFrom <= currentTime && currentTime <= validTo;
    });
  
    // Filter edges based on nodes and temporal data
    const filteredEdges = fullGraphData.edges.filter((edge: GraphEdge) => {
      // Check that source and target nodes exist
      const sourceExists = filteredNodes.some(node => node.id === edge.source);
      const targetExists = filteredNodes.some(node => node.id === edge.target);
      if (!sourceExists || !targetExists) return false;
      
      // Apply temporal filtering
      if (!edge.temporal || !edge.temporal.validFrom) return true;
      const validFrom = new Date(edge.temporal.validFrom).getTime();
      const validTo = edge.temporal.validTo ? new Date(edge.temporal.validTo).getTime() : Infinity;
      return validFrom <= currentTime && currentTime <= validTo;
    });
  
    return { nodes: filteredNodes, edges: filteredEdges };
  }, [fullGraphData, currentTime]);

  useEffect(() => {
    // Set loading to false after component mounts and data is processed
    setLoading(false);
  }, [displayedGraphData]); // Will run whenever filtered data changes
  
  // Timeline playback control
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isPlaying && timelineData.length > 0) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  // Export schema (for demonstration, export the JSON schema defined earlier)
  const exportSchema = () => {
    const schema = {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Clinical Trials Knowledge Graph",
      "type": "object",
      "properties": {
        "graph": {
          "type": "object",
          "required": ["nodes", "edges", "metadata"],
          "properties": {
            "nodes": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["id", "label", "properties"],
                "properties": {
                  "id": { "type": "string" },
                  "label": { "type": "string", "enum": [
                    "schema:ClinicalTrial",
                    "schema:Drug",
                    "schema:MedicalOrganization",
                    "schema:MedicalCondition",
                    "schema:RegulatoryApproval",
                    "schema:GovernmentOrganization"
                  ]},
                  "properties": { "type": "object" },
                  "layout": {
                    "type": "object",
                    "properties": {
                      "x": { "type": "number" },
                      "y": { "type": "number" }
                    }
                  },
                  "temporal": {
                    "type": "object",
                    "properties": {
                      "validFrom": { "type": "string", "format": "date-time" },
                      "validTo": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            },
            "edges": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["id", "source", "target", "type"],
                "properties": {
                  "id": { "type": "string" },
                  "source": { "type": "string" },
                  "target": { "type": "string" },
                  "type": { "type": "string", "enum": [
                    "schema:fundedBy",
                    "schema:testedDrug",
                    "schema:approvedBy",
                    "schema:hasOutcome",
                    "schema:relatedTo"
                  ]},
                  "properties": { "type": "object" },
                  "temporal": {
                    "type": "object",
                    "properties": {
                      "validFrom": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            },
            "metadata": {
              "type": "object",
              "properties": {
                "schemaVersion": { "type": "string" },
                "graphType": { "type": "string", "enum": ["directed"] },
                "description": { "type": "string" },
                "author": { "type": "string" },
                "lastUpdated": { "type": "string", "format": "date-time" }
              }
            }
          }
        }
      }
    };
    const blob = new Blob([JSON.stringify(schema, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'clinical-trials-schema.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Export current graph data
  const exportGraphData = () => {
    const exportData = { graph: fullGraphData };
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'clinical-trials-graph.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Import graph data from a JSON file
  const importGraphData = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files ? event.target.files[0] : null;
    if (!file) return;
    setImportError(null);
    const reader = new FileReader();
    reader.onload = e => {
      try {
        const imported = JSON.parse(e.target?.result as string);
        const newGraph = imported.graph ? imported.graph : imported;
        // Basic validation: check if nodes and edges exist
        if (newGraph.nodes && newGraph.edges && newGraph.metadata) {
          setFullGraphData(newGraph);
          setCurrentTime(new Date("2020-08-18T00:00:00Z").getTime());
        } else {
          setImportError("Imported file does not match the required schema format.");
        }
      } catch (err) {
        setImportError("Failed to parse imported file. Please ensure it is valid JSON.");
      }
    };
    reader.readAsText(file);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  // Reset to default clinical trials data
  const resetToDefault = () => {
    setFullGraphData(defaultGraphData.graph);
    setCurrentTime(new Date("2020-08-18T00:00:00Z").getTime());
    setImportError(null);
  };

  const formatDate = (timestamp: number) => new Date(timestamp).toLocaleDateString();

  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || {};
  const keyEvents = fullGraphData.metadata && fullGraphData.metadata.graphType === "directed" ? [
    { timestamp: new Date("2020-08-18T00:00:00Z").getTime(), description: "Trial Launched" },
    { timestamp: new Date("2021-12-08T00:00:00Z").getTime(), description: "EUA Granted" }
  ] : [];
  const currentEvent = keyEvents.find(event => {
    const eventDate = new Date(event.timestamp);
    const currentDate = new Date(currentTime);
    return eventDate.getMonth() === currentDate.getMonth() &&
           eventDate.getFullYear() === currentDate.getFullYear();
  });

  const filteredBySearchTerm = (data: { nodes: GraphNode[]; edges: GraphEdge[] }) => {
    if (!searchTerm) return data;
    
    const matchedNodes = data.nodes.filter(node => 
      node.properties['schema:name']?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      node.label.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    const nodeIds = new Set(matchedNodes.map(node => node.id));
    
    const matchedEdges = data.edges.filter(edge => 
      nodeIds.has(edge.source) || 
      nodeIds.has(edge.target) ||
      edge.type.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    return { nodes: matchedNodes, edges: matchedEdges };
  };

  const dataToDisplay = filteredBySearchTerm(displayedGraphData);

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Clinical Trials Graph Explorer</h1>
          <div className="flex items-center space-x-4">
            <div className="px-4 py-2 bg-white bg-opacity-20 rounded">{formatDate(currentTime)}</div>
            <div className="flex">
              <button onClick={() => setMetadataVisible(!metadataVisible)} className="bg-white bg-opacity-20 px-3 py-2 rounded-l hover:bg-opacity-30 transition" title="View metadata">Info</button>
              <button onClick={exportSchema} className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition" title="Export schema">Schema</button>
              <button onClick={exportGraphData} className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition" title="Export graph data">Export</button>
              <button onClick={() => fileInputRef.current && fileInputRef.current.click()} className="bg-white bg-opacity-20 px-3 py-2 hover:bg-opacity-30 transition" title="Import graph data">Import</button>
              <button onClick={resetToDefault} className="bg-white bg-opacity-20 px-3 py-2 rounded-r hover:bg-opacity-30 transition" title="Reset to default">Reset</button>
              <input type="file" accept="application/json" ref={fileInputRef} onChange={importGraphData} style={{ display: 'none' }} />
            </div>
          </div>
        </div>
      </header>

      {/* Import Error Alert */}
      {importError && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <div className="flex items-center">
            <svg className="h-6 w-6 text-red-500 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <p className="font-bold">Import Error</p>
              <p className="text-sm">{importError}</p>
            </div>
            <button onClick={() => setImportError(null)} className="ml-auto text-red-500 hover:text-red-700">
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      )}

      {/* Metadata Panel */}
      {metadataVisible && fullGraphData.metadata && (
        <div className="bg-white border-b shadow-sm p-4">
          <div className="container mx-auto">
            <div className="flex justify-between items-center mb-2">
              <h2 className="text-lg font-semibold">Graph Metadata</h2>
              <button onClick={() => setMetadataVisible(false)} className="text-gray-500 hover:text-gray-700">
                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <span className="text-sm font-medium text-gray-500">Description</span>
                <p className="text-sm">{fullGraphData.metadata.description}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Schema Version</span>
                <p className="text-sm">{fullGraphData.metadata.schemaVersion}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Graph Type</span>
                <p className="text-sm">{fullGraphData.metadata.graphType}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Last Updated</span>
                <p className="text-sm">{new Date(fullGraphData.metadata.lastUpdated).toLocaleDateString()}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Author</span>
                <p className="text-sm">{fullGraphData.metadata.author}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar - Filters */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Search</label>
            <input 
              type="text" 
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full p-2 border rounded" 
              placeholder="Search nodes and edges..."
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {Array.from(new Set(fullGraphData.nodes.map((node: any) => node.label))).map((label: string) => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {Array.from(new Set(fullGraphData.edges.map((edge: any) => edge.type))).map((type: string) => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Layout Type</label>
            <select 
              value={layoutType}
              onChange={(e) => setLayoutType(e.target.value)}
              className="w-full p-2 border rounded"
            >
              <option value="cose">Force-Directed (Physics)</option>
              <option value="grid">Grid</option>
              <option value="circle">Circle</option>
              <option value="concentric">Concentric</option>
              <option value="preset">Preset (Use Fixed Positions)</option>
            </select>
          </div>
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea className="w-full p-2 border rounded h-24 text-sm" placeholder="Ask a question about the graph data..."></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">Ask AI</button>
          </div>
        </div>

        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline Control */}
          {timelineData.length > 0 && (
            <div className="bg-white border-b p-4 flex flex-col space-y-4">
              <div className="flex items-center space-x-4">
                <button onClick={() => setIsPlaying(!isPlaying)} className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center justify-center w-24">
                  {isPlaying ? 'Pause' : 'Play'}
                </button>
                <div className="flex space-x-2">
                  <button onClick={() => setPlaybackSpeed(0.5)} className={`px-2 py-1 rounded text-xs ${playbackSpeed === 0.5 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>0.5x</button>
                  <button onClick={() => setPlaybackSpeed(1)} className={`px-2 py-1 rounded text-xs ${playbackSpeed === 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>1x</button>
                  <button onClick={() => setPlaybackSpeed(2)} className={`px-2 py-1 rounded text-xs ${playbackSpeed === 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>2x</button>
                </div>
                <div className="text-sm font-medium">{formatDate(currentTime)}</div>
                {currentEvent && (
                  <div className="flex-1 ml-4 text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-500">
                    <span className="font-medium">Event:</span> {currentEvent.description}
                  </div>
                )}
              </div>
              <div className="flex-1">
                <input type="range" min={timelineData[0].timestamp} max={timelineData[timelineData.length - 1].timestamp} value={currentTime} onChange={(e) => setCurrentTime(parseInt(e.target.value))} className="w-full" />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                </div>
              </div>
            </div>
          )}

          {/* Graph Visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                <div className="ml-4 text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                {/* Graph metadata */}                
                <div className="absolute top-4 left-4 bg-white p-2 rounded shadow-sm z-10">
                  <div className="text-sm font-medium border-b pb-1 mb-1">Graph Statistics</div>
                  <div className="text-sm"><strong>Nodes:</strong> {dataToDisplay.nodes.length}</div>
                  <div className="text-sm"><strong>Edges:</strong> {dataToDisplay.edges.length}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>

                {/* Cytoscape visualization */}
                <GraphVisualization 
                  graphData={dataToDisplay} 
                  onNodeSelect={setSelectedNode}
                  layoutType={layoutType} // Pass the state value
                />
                
                {/* Legend */}
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">MedicalOrganization</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">ClinicalTrial</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Drug</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-300 mr-2"></div>
                      <span className="text-xs">MedicalCondition</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">RegulatoryApproval</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-gray-500 mr-2"></div>
                      <span className="text-xs">GovernmentOrganization</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Right Sidebar - Node Details */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button className="text-gray-400 hover:text-gray-600" onClick={() => setSelectedNode(null)}>×</button>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#edf2f7', color: '#2d3748' }}>
                  {selectedNode.label}
                </div>
              </div>
              {selectedNode.temporal && (
                <div className="mb-4">
                  <div className="text-sm text-gray-500">Temporal Data</div>
                  <div className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">Valid From:</div>
                    <div className="text-sm">{new Date(selectedNode.temporal.validFrom).toLocaleDateString()}</div>
                  </div>
                  {selectedNode.temporal.validTo && (
                    <div className="flex py-1 border-b border-gray-100">
                      <div className="font-medium text-sm w-1/3">Valid To:</div>
                      <div className="text-sm">{new Date(selectedNode.temporal.validTo).toLocaleDateString()}</div>
                    </div>
                  )}
                </div>
              )}
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">Find Related Nodes</button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">View History</button>
              </div>
            </div>
          ) : (
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the clinical trials graph!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze trial progress over time</li>
                  <li>Find relationships between trials and drugs</li>
                  <li>Explain approval events</li>
                  <li>Discover connections among entities</li>
                </ul>
              </div>
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How did the clinical trial progress over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What relationships exist between AstraZeneca and the trial?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    When was the EUA granted?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default LifeSciencesViz1;


====================================================================================================

File: src/components/pages/CytoscapeGraphViz1.tsx
--------------------------------------------------------------------------------
'use client'
import React, { useState, useEffect, useRef } from 'react';

import cytoscape from 'cytoscape';

// Graph Visualization Component using Cytoscape.js
const GraphVisualization = ({ graphData, onNodeSelect }) => {
  const cyRef = useRef(null);
  const containerRef = useRef(null);

  // Initialize Cytoscape instance
  useEffect(() => {
    if (!graphData || !containerRef.current) return;

    // Convert graph data to Cytoscape format using the updated layout field
    const elements = {
      nodes: graphData.nodes.map(node => ({
        data: { 
          id: node.id,
          label: node.label, 
          ...node.properties
        },
        position: node.layout ? { x: node.layout.x, y: node.layout.y } : { x: 0, y: 0 }
      })),
      edges: graphData.edges.map(edge => ({
        data: { 
          id: edge.id, 
          source: edge.source, 
          target: edge.target, 
          label: edge.type,
          ...edge.properties
        }
      }))
    };

    // Define node styles based on label
    const nodeStyles = {
      'Person': {
        'background-color': '#4299e1',
        'border-color': '#2b6cb0'
      },
      'Company': {
        'background-color': '#ed8936',
        'border-color': '#c05621'
      },
      'Project': {
        'background-color': '#48bb78',
        'border-color': '#2f855a'
      },
      'Technology': {
        'background-color': '#9f7aea',
        'border-color': '#6b46c1'
      }
    };

    // Define edge styles based on type
    const edgeStyles = {
      'WORKS_AT': {
        'line-color': '#a0aec0',
        'target-arrow-color': '#a0aec0'
      },
      'MANAGES': {
        'line-color': '#fc8181',
        'target-arrow-color': '#fc8181'
      },
      'WORKS_ON': {
        'line-color': '#fbd38d',
        'target-arrow-color': '#fbd38d'
      },
      'USES': {
        'line-color': '#d6bcfa',
        'target-arrow-color': '#d6bcfa'
      }
    };

    // Create new Cytoscape instance
    cyRef.current = cytoscape({
      container: containerRef.current,
      elements: elements,
      style: [
        {
          selector: 'node',
          style: {
            'width': 40,
            'height': 40,
            'background-color': '#4299e1',
            'border-width': 2,
            'border-color': '#2b6cb0',
            'label': 'data(id)',
            'color': 'white',
            'text-halign': 'center',
            'text-valign': 'center',
            'font-size': '12px',
            'font-weight': 'bold'
          }
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#a0aec0',
            'target-arrow-color': '#a0aec0',
            'target-arrow-shape': 'triangle',
            'curve-style': 'bezier',
            'label': 'data(label)',
            'font-size': '10px',
            'text-rotation': 'autorotate',
            'text-margin-y': -10
          }
        },
        // Apply node styles based on label
        ...Object.entries(nodeStyles).map(([label, style]) => ({
          selector: `node[label = "${label}"]`,
          style: style
        })),
        // Apply edge styles based on type
        ...Object.entries(edgeStyles).map(([type, style]) => ({
          selector: `edge[label = "${type}"]`,
          style: style
        })),
        // Selected node style
        {
          selector: 'node:selected',
          style: {
            'border-width': 4,
            'border-color': '#fff',
            'box-shadow': '0 0 0 2px #000'
          }
        }
      ],
      layout: {
        name: 'preset'
      },
      userZoomingEnabled: true,
      userPanningEnabled: true,
      boxSelectionEnabled: false
    });

    // Add event listeners
    cyRef.current.on('tap', 'node', event => {
      const node = event.target;
      const nodeData = graphData.nodes.find(n => n.id === node.id());
      if (nodeData && onNodeSelect) {
        onNodeSelect(nodeData);
      }
    });

    cyRef.current.on('tap', function(event) {
      if (event.target === cyRef.current) {
        // Clicked on background
        if (onNodeSelect) {
          onNodeSelect(null);
        }
      }
    });

    // Clean up
    return () => {
      if (cyRef.current) {
        cyRef.current.destroy();
      }
    };
  }, [graphData, onNodeSelect]);

  return (
    <div ref={containerRef} style={{ width: '100%', height: '100%' }} />
  );
};

// Main App Component
const CytoscapeGraphViz = () => {
  // State management
  const [currentTime, setCurrentTime] = useState(1698796800000); // Nov 1, 2023
  const [graphData, setGraphData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  const [timelineData, setTimelineData] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(1);

  // Load mock timeline data
  useEffect(() => {
    const mockTimelineData = [
      { timestamp: 1672531200000, nodeCount: 45, edgeCount: 67, changes: 0, date: "Jan 2023" },
      { timestamp: 1675209600000, nodeCount: 52, edgeCount: 78, changes: 18, date: "Feb 2023" },
      { timestamp: 1677628800000, nodeCount: 58, edgeCount: 92, changes: 20, date: "Mar 2023" },
      { timestamp: 1680307200000, nodeCount: 62, edgeCount: 103, changes: 15, date: "Apr 2023" },
      { timestamp: 1682899200000, nodeCount: 71, edgeCount: 126, changes: 32, date: "May 2023" },
      { timestamp: 1685577600000, nodeCount: 73, edgeCount: 131, changes: 7, date: "Jun 2023" },
      { timestamp: 1688169600000, nodeCount: 79, edgeCount: 142, changes: 17, date: "Jul 2023" },
      { timestamp: 1690848000000, nodeCount: 84, edgeCount: 155, changes: 18, date: "Aug 2023" },
      { timestamp: 1693526400000, nodeCount: 86, edgeCount: 161, changes: 8, date: "Sep 2023" },
      { timestamp: 1696118400000, nodeCount: 90, edgeCount: 170, changes: 13, date: "Oct 2023" },
      { timestamp: 1698796800000, nodeCount: 94, edgeCount: 182, changes: 16, date: "Nov 2023" },
      { timestamp: 1701388800000, nodeCount: 98, edgeCount: 193, changes: 15, date: "Dec 2023" },
    ];

    setTimelineData(mockTimelineData);
    loadGraphData(currentTime);
  }, []);

  // Play/pause timeline animation
  useEffect(() => {
    let interval;
    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prevTime => {
          const currentIndex = timelineData.findIndex(item => item.timestamp >= prevTime);
          const nextIndex = (currentIndex + 1) % timelineData.length;
          return timelineData[nextIndex].timestamp;
        });
      }, 2000 / playbackSpeed);
    }
    return () => clearInterval(interval);
  }, [isPlaying, timelineData, playbackSpeed]);

  // Update graph data when time changes
  useEffect(() => {
    if (currentTime) {
      loadGraphData(currentTime);
    }
  }, [currentTime]);

  // Load graph data for a specific timestamp using updated sample JSON structure
  const loadGraphData = (timestamp) => {
    setLoading(true);
    setTimeout(() => {
      // Base nodes that are always present with updated layout and property keys
      const baseNodes = [
        { id: "1", label: "Person", properties: { name: "John Smith", age: 34 }, layout: { x: 100, y: 100 } },
        { id: "2", label: "Person", properties: { name: "Emma Johnson", age: 29 }, layout: { x: 250, y: 150 } },
        { id: "3", label: "Company", properties: { name: "Acme Corp", foundedDate: "2005-01-01" }, layout: { x: 175, y: 250 } },
      ];

      // Additional nodes appear over time (using the 'temporal' object with ISO validFrom)
      const timeBasedNodes = [
        { id: "4", label: "Project", properties: { name: "Website Redesign", budget: 50000 }, layout: { x: 300, y: 120 }, temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "5", label: "Technology", properties: { name: "React", version: "18.2" }, layout: { x: 400, y: 170 }, temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "6", label: "Project", properties: { name: "Mobile App", budget: 75000 }, layout: { x: 350, y: 250 }, temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "7", label: "Person", properties: { name: "Alex Chen", age: 31 }, layout: { x: 150, y: 350 }, temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "8", label: "Technology", properties: { name: "Node.js", version: "18.0" }, layout: { x: 450, y: 300 }, temporal: { validFrom: "2023-09-01T00:00:00Z" } },
      ];

      // Base edges always present (updated property keys)
      const baseEdges = [
        { id: "e1", source: "1", target: "3", type: "WORKS_AT", properties: { startDate: "2018-01-01" } },
        { id: "e2", source: "2", target: "3", type: "WORKS_AT", properties: { startDate: "2020-01-01" } },
      ];

      // Additional edges appear over time (using the 'temporal' object)
      const timeBasedEdges = [
        { id: "e3", source: "3", target: "4", type: "MANAGES", properties: { startDate: "2023-02-15" }, temporal: { validFrom: "2023-02-01T00:00:00Z" } },
        { id: "e4", source: "1", target: "4", type: "WORKS_ON", properties: { role: "Project Manager" }, temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e5", source: "2", target: "4", type: "WORKS_ON", properties: { role: "Developer" }, temporal: { validFrom: "2023-03-01T00:00:00Z" } },
        { id: "e6", source: "4", target: "5", type: "USES", properties: { criticalityLevel: "High" }, temporal: { validFrom: "2023-04-01T00:00:00Z" } },
        { id: "e7", source: "3", target: "6", type: "MANAGES", properties: { startDate: "2023-05-10" }, temporal: { validFrom: "2023-05-01T00:00:00Z" } },
        { id: "e8", source: "2", target: "6", type: "WORKS_ON", properties: { role: "Team Lead" }, temporal: { validFrom: "2023-06-01T00:00:00Z" } },
        { id: "e9", source: "7", target: "3", type: "WORKS_AT", properties: { startDate: "2023-07-01" }, temporal: { validFrom: "2023-07-01T00:00:00Z" } },
        { id: "e10", source: "7", target: "6", type: "WORKS_ON", properties: { role: "Developer" }, temporal: { validFrom: "2023-08-01T00:00:00Z" } },
        { id: "e11", source: "6", target: "8", type: "USES", properties: { criticalityLevel: "Medium" }, temporal: { validFrom: "2023-09-01T00:00:00Z" } },
        { id: "e12", source: "7", target: "4", type: "WORKS_ON", properties: { role: "Support" }, temporal: { validFrom: "2023-10-01T00:00:00Z" } },
      ];

      // Filter nodes based on temporal.validFrom (if present)
      const filteredNodes = [
        ...baseNodes,
        ...timeBasedNodes.filter(node => new Date(node.temporal.validFrom).getTime() <= timestamp)
      ];

      // Filter edges based on temporal.validFrom (if present)
      const filteredEdges = [
        ...baseEdges,
        ...timeBasedEdges.filter(edge => new Date(edge.temporal.validFrom).getTime() <= timestamp)
      ];

      const graphData = {
        nodes: filteredNodes,
        edges: filteredEdges
      };

      setGraphData(graphData);
      setLoading(false);
    }, 500);
  };

  // Format timestamp to readable date
  const formatDate = (timestamp) => {
    return new Date(timestamp).toLocaleDateString();
  };

  // Get current timeline data point
  const currentTimelinePoint = timelineData.find(item => item.timestamp === currentTime) || {};

  // Key events in the timeline
  const keyEvents = [
    { timestamp: 1675209600000, description: "Website Redesign project started" },
    { timestamp: 1680307200000, description: "React technology adopted" },
    { timestamp: 1682899200000, description: "Mobile App project launched" },
    { timestamp: 1688169600000, description: "Alex Chen joined the company" },
    { timestamp: 1693526400000, description: "Node.js implemented in Mobile App" }
  ];

  // Get current event if there is one
  const currentEvent = keyEvents.find(event => event.timestamp === currentTime);

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Temporal Graph Explorer</h1>
          <div className="px-4 py-2 bg-white bg-opacity-20 rounded">
            {formatDate(currentTime)}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left sidebar */}
        <div className="w-64 bg-white shadow-md p-4 flex flex-col overflow-auto">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Node Labels</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["Person", "Company", "Project", "Technology"].map(label => (
                <div key={label} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Edge Types</label>
            <div className="space-y-2 border p-2 rounded max-h-32 overflow-y-auto">
              {["WORKS_AT", "MANAGES", "WORKS_ON", "USES"].map(type => (
                <div key={type} className="flex items-center">
                  <input type="checkbox" defaultChecked className="mr-2" />
                  <span>{type}</span>
                </div>
              ))}
            </div>
          </div>
          <div className="mt-auto">
            <h3 className="text-md font-medium mb-2">Ask AI Assistant</h3>
            <textarea 
              className="w-full p-2 border rounded h-24 text-sm"
              placeholder="Ask a question about the graph data..."
            ></textarea>
            <button className="w-full mt-2 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
              Ask AI
            </button>
          </div>
        </div>

        {/* Main Panel */}
        <div className="flex-1 flex flex-col">
          {/* Timeline control */}
          <div className="bg-white border-b p-4 flex flex-col space-y-4">
            <div className="flex items-center space-x-4">
              <button 
                onClick={() => setIsPlaying(!isPlaying)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center justify-center w-24"
              >
                {isPlaying ? 'Pause' : 'Play'}
              </button>
              <div className="flex space-x-2">
                <button 
                  onClick={() => setPlaybackSpeed(0.5)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 0.5 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  0.5x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(1)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  1x
                </button>
                <button 
                  onClick={() => setPlaybackSpeed(2)}
                  className={`px-2 py-1 rounded text-xs ${playbackSpeed === 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                >
                  2x
                </button>
              </div>
              <div className="text-sm font-medium">
                {formatDate(currentTime)}
              </div>
              {currentEvent && (
                <div className="flex-1 ml-4 text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-500">
                  <span className="font-medium">Event:</span> {currentEvent.description}
                </div>
              )}
            </div>
            <div className="flex-1">
              <input
                type="range"
                min={timelineData.length > 0 ? timelineData[0].timestamp : 0}
                max={timelineData.length > 0 ? timelineData[timelineData.length - 1].timestamp : 100}
                value={currentTime}
                onChange={(e) => setCurrentTime(parseInt(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                {timelineData.length > 0 && (
                  <>
                    <span>{timelineData[0].date}</span>
                    <span>{timelineData[Math.floor(timelineData.length / 2)].date}</span>
                    <span>{timelineData[timelineData.length - 1].date}</span>
                  </>
                )}
              </div>
            </div>
          </div>

          {/* Graph visualization */}
          <div className="flex-1 overflow-auto p-6">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                <div className="ml-4 text-lg">Loading graph data...</div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-md p-4 h-full relative">
                {/* Graph metadata */}
                <div className="absolute top-4 left-4 bg-white p-2 rounded shadow-sm z-10">
                  <div className="text-sm font-medium border-b pb-1 mb-1">Graph Statistics</div>
                  <div className="text-sm"><strong>Nodes:</strong> {currentTimelinePoint.nodeCount || 0}</div>
                  <div className="text-sm"><strong>Edges:</strong> {currentTimelinePoint.edgeCount || 0}</div>
                  <div className="text-sm"><strong>Changes:</strong> {currentTimelinePoint.changes || 0}</div>
                </div>
                {/* Cytoscape visualization */}
                <GraphVisualization 
                  graphData={graphData} 
                  onNodeSelect={setSelectedNode}
                />
                {/* Legend */}
                <div className="absolute bottom-4 left-4 bg-white p-2 rounded shadow-sm">
                  <div className="text-sm font-medium mb-1">Node Types</div>
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                      <span className="text-xs">Person</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-orange-500 mr-2"></div>
                      <span className="text-xs">Company</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span className="text-xs">Project</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                      <span className="text-xs">Technology</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Right Sidebar - Details Panel */}
        <div className="w-72 bg-white shadow-md p-4 overflow-auto">
          {selectedNode ? (
            // Node details panel
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Node Details</h2>
                <button 
                  className="text-gray-400 hover:text-gray-600"
                  onClick={() => setSelectedNode(null)}
                >
                  ×
                </button>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">ID</div>
                <div className="font-medium">{selectedNode.id}</div>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500">Label</div>
                <div className="inline-block px-2 py-1 rounded text-xs font-medium"
                  style={{ 
                    backgroundColor: 
                      selectedNode.label === 'Person' ? '#bee3f8' :
                      selectedNode.label === 'Company' ? '#feebc8' :
                      selectedNode.label === 'Project' ? '#c6f6d5' :
                      selectedNode.label === 'Technology' ? '#e9d8fd' : '#bee3f8',
                    color:
                      selectedNode.label === 'Person' ? '#2c5282' :
                      selectedNode.label === 'Company' ? '#7b341e' :
                      selectedNode.label === 'Project' ? '#276749' :
                      selectedNode.label === 'Technology' ? '#553c9a' : '#2c5282',
                  }}
                >
                  {selectedNode.label}
                </div>
              </div>
              <div className="mb-4">
                <div className="text-sm text-gray-500 mb-1">Properties</div>
                {Object.entries(selectedNode.properties).map(([key, value]) => (
                  <div key={key} className="flex py-1 border-b border-gray-100">
                    <div className="font-medium text-sm w-1/3">{key}:</div>
                    <div className="text-sm">{value}</div>
                  </div>
                ))}
              </div>
              <div className="mt-6">
                <button className="w-full py-2 mb-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition">
                  Find Related Nodes
                </button>
                <button className="w-full py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200 transition">
                  View History
                </button>
              </div>
            </div>
          ) : (
            // LLM query panel (simplified)
            <div>
              <h2 className="text-lg font-semibold mb-4">AI Assistant</h2>
              <div className="bg-blue-50 p-3 rounded mb-4">
                <p className="text-sm">Ask me anything about the graph data!</p>
                <ul className="text-xs text-gray-600 mt-2 ml-4 list-disc">
                  <li>Analyze temporal patterns</li>
                  <li>Find relationships between nodes</li>
                  <li>Explain graph evolution</li>
                  <li>Discover paths between entities</li>
                </ul>
              </div>
              <div className="mb-4">
                <div className="text-sm mb-2 font-medium">Suggested Questions</div>
                <div className="space-y-2">
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    How has the graph evolved over time?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    What connections exist between John and the Website Redesign project?
                  </div>
                  <div className="bg-gray-100 text-xs p-2 rounded cursor-pointer hover:bg-gray-200">
                    Which month had the most significant changes?
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CytoscapeGraphViz;


====================================================================================================

